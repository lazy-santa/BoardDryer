
BoardDryer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000657c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800668c  0800668c  0001668c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006874  08006874  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006874  08006874  00016874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800687c  0800687c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800687c  0800687c  0001687c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006880  08006880  00016880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000078  080068fc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080068fc  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e038  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233d  00000000  00000000  0002e0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00030418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00031248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018713  00000000  00000000  00031f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107f0  00000000  00000000  0004a68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9d2  00000000  00000000  0005ae7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e684d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b4  00000000  00000000  000e68a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08006674 	.word	0x08006674

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08006674 	.word	0x08006674

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_d2f>:
 80004d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004e0:	bf24      	itt	cs
 80004e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004ea:	d90d      	bls.n	8000508 <__aeabi_d2f+0x30>
 80004ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000500:	bf08      	it	eq
 8000502:	f020 0001 	biceq.w	r0, r0, #1
 8000506:	4770      	bx	lr
 8000508:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800050c:	d121      	bne.n	8000552 <__aeabi_d2f+0x7a>
 800050e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000512:	bfbc      	itt	lt
 8000514:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000518:	4770      	bxlt	lr
 800051a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800051e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000522:	f1c2 0218 	rsb	r2, r2, #24
 8000526:	f1c2 0c20 	rsb	ip, r2, #32
 800052a:	fa10 f30c 	lsls.w	r3, r0, ip
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	bf18      	it	ne
 8000534:	f040 0001 	orrne.w	r0, r0, #1
 8000538:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800053c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000540:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000544:	ea40 000c 	orr.w	r0, r0, ip
 8000548:	fa23 f302 	lsr.w	r3, r3, r2
 800054c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000550:	e7cc      	b.n	80004ec <__aeabi_d2f+0x14>
 8000552:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000556:	d107      	bne.n	8000568 <__aeabi_d2f+0x90>
 8000558:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800055c:	bf1e      	ittt	ne
 800055e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000562:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000566:	4770      	bxne	lr
 8000568:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800056c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000570:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__aeabi_frsub>:
 8000578:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800057c:	e002      	b.n	8000584 <__addsf3>
 800057e:	bf00      	nop

08000580 <__aeabi_fsub>:
 8000580:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000584 <__addsf3>:
 8000584:	0042      	lsls	r2, r0, #1
 8000586:	bf1f      	itttt	ne
 8000588:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800058c:	ea92 0f03 	teqne	r2, r3
 8000590:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000594:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000598:	d06a      	beq.n	8000670 <__addsf3+0xec>
 800059a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800059e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005a2:	bfc1      	itttt	gt
 80005a4:	18d2      	addgt	r2, r2, r3
 80005a6:	4041      	eorgt	r1, r0
 80005a8:	4048      	eorgt	r0, r1
 80005aa:	4041      	eorgt	r1, r0
 80005ac:	bfb8      	it	lt
 80005ae:	425b      	neglt	r3, r3
 80005b0:	2b19      	cmp	r3, #25
 80005b2:	bf88      	it	hi
 80005b4:	4770      	bxhi	lr
 80005b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005c2:	bf18      	it	ne
 80005c4:	4240      	negne	r0, r0
 80005c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005d2:	bf18      	it	ne
 80005d4:	4249      	negne	r1, r1
 80005d6:	ea92 0f03 	teq	r2, r3
 80005da:	d03f      	beq.n	800065c <__addsf3+0xd8>
 80005dc:	f1a2 0201 	sub.w	r2, r2, #1
 80005e0:	fa41 fc03 	asr.w	ip, r1, r3
 80005e4:	eb10 000c 	adds.w	r0, r0, ip
 80005e8:	f1c3 0320 	rsb	r3, r3, #32
 80005ec:	fa01 f103 	lsl.w	r1, r1, r3
 80005f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005f4:	d502      	bpl.n	80005fc <__addsf3+0x78>
 80005f6:	4249      	negs	r1, r1
 80005f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000600:	d313      	bcc.n	800062a <__addsf3+0xa6>
 8000602:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000606:	d306      	bcc.n	8000616 <__addsf3+0x92>
 8000608:	0840      	lsrs	r0, r0, #1
 800060a:	ea4f 0131 	mov.w	r1, r1, rrx
 800060e:	f102 0201 	add.w	r2, r2, #1
 8000612:	2afe      	cmp	r2, #254	; 0xfe
 8000614:	d251      	bcs.n	80006ba <__addsf3+0x136>
 8000616:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800061a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800061e:	bf08      	it	eq
 8000620:	f020 0001 	biceq.w	r0, r0, #1
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	4770      	bx	lr
 800062a:	0049      	lsls	r1, r1, #1
 800062c:	eb40 0000 	adc.w	r0, r0, r0
 8000630:	3a01      	subs	r2, #1
 8000632:	bf28      	it	cs
 8000634:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000638:	d2ed      	bcs.n	8000616 <__addsf3+0x92>
 800063a:	fab0 fc80 	clz	ip, r0
 800063e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000642:	ebb2 020c 	subs.w	r2, r2, ip
 8000646:	fa00 f00c 	lsl.w	r0, r0, ip
 800064a:	bfaa      	itet	ge
 800064c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000650:	4252      	neglt	r2, r2
 8000652:	4318      	orrge	r0, r3
 8000654:	bfbc      	itt	lt
 8000656:	40d0      	lsrlt	r0, r2
 8000658:	4318      	orrlt	r0, r3
 800065a:	4770      	bx	lr
 800065c:	f092 0f00 	teq	r2, #0
 8000660:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000664:	bf06      	itte	eq
 8000666:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800066a:	3201      	addeq	r2, #1
 800066c:	3b01      	subne	r3, #1
 800066e:	e7b5      	b.n	80005dc <__addsf3+0x58>
 8000670:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000674:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000678:	bf18      	it	ne
 800067a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800067e:	d021      	beq.n	80006c4 <__addsf3+0x140>
 8000680:	ea92 0f03 	teq	r2, r3
 8000684:	d004      	beq.n	8000690 <__addsf3+0x10c>
 8000686:	f092 0f00 	teq	r2, #0
 800068a:	bf08      	it	eq
 800068c:	4608      	moveq	r0, r1
 800068e:	4770      	bx	lr
 8000690:	ea90 0f01 	teq	r0, r1
 8000694:	bf1c      	itt	ne
 8000696:	2000      	movne	r0, #0
 8000698:	4770      	bxne	lr
 800069a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800069e:	d104      	bne.n	80006aa <__addsf3+0x126>
 80006a0:	0040      	lsls	r0, r0, #1
 80006a2:	bf28      	it	cs
 80006a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006a8:	4770      	bx	lr
 80006aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006ae:	bf3c      	itt	cc
 80006b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bxcc	lr
 80006b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006c2:	4770      	bx	lr
 80006c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006c8:	bf16      	itet	ne
 80006ca:	4608      	movne	r0, r1
 80006cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006d0:	4601      	movne	r1, r0
 80006d2:	0242      	lsls	r2, r0, #9
 80006d4:	bf06      	itte	eq
 80006d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006da:	ea90 0f01 	teqeq	r0, r1
 80006de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006e2:	4770      	bx	lr

080006e4 <__aeabi_ui2f>:
 80006e4:	f04f 0300 	mov.w	r3, #0
 80006e8:	e004      	b.n	80006f4 <__aeabi_i2f+0x8>
 80006ea:	bf00      	nop

080006ec <__aeabi_i2f>:
 80006ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	ea5f 0c00 	movs.w	ip, r0
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000700:	4601      	mov	r1, r0
 8000702:	f04f 0000 	mov.w	r0, #0
 8000706:	e01c      	b.n	8000742 <__aeabi_l2f+0x2a>

08000708 <__aeabi_ul2f>:
 8000708:	ea50 0201 	orrs.w	r2, r0, r1
 800070c:	bf08      	it	eq
 800070e:	4770      	bxeq	lr
 8000710:	f04f 0300 	mov.w	r3, #0
 8000714:	e00a      	b.n	800072c <__aeabi_l2f+0x14>
 8000716:	bf00      	nop

08000718 <__aeabi_l2f>:
 8000718:	ea50 0201 	orrs.w	r2, r0, r1
 800071c:	bf08      	it	eq
 800071e:	4770      	bxeq	lr
 8000720:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000724:	d502      	bpl.n	800072c <__aeabi_l2f+0x14>
 8000726:	4240      	negs	r0, r0
 8000728:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800072c:	ea5f 0c01 	movs.w	ip, r1
 8000730:	bf02      	ittt	eq
 8000732:	4684      	moveq	ip, r0
 8000734:	4601      	moveq	r1, r0
 8000736:	2000      	moveq	r0, #0
 8000738:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800073c:	bf08      	it	eq
 800073e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000742:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000746:	fabc f28c 	clz	r2, ip
 800074a:	3a08      	subs	r2, #8
 800074c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000750:	db10      	blt.n	8000774 <__aeabi_l2f+0x5c>
 8000752:	fa01 fc02 	lsl.w	ip, r1, r2
 8000756:	4463      	add	r3, ip
 8000758:	fa00 fc02 	lsl.w	ip, r0, r2
 800075c:	f1c2 0220 	rsb	r2, r2, #32
 8000760:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000764:	fa20 f202 	lsr.w	r2, r0, r2
 8000768:	eb43 0002 	adc.w	r0, r3, r2
 800076c:	bf08      	it	eq
 800076e:	f020 0001 	biceq.w	r0, r0, #1
 8000772:	4770      	bx	lr
 8000774:	f102 0220 	add.w	r2, r2, #32
 8000778:	fa01 fc02 	lsl.w	ip, r1, r2
 800077c:	f1c2 0220 	rsb	r2, r2, #32
 8000780:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000784:	fa21 f202 	lsr.w	r2, r1, r2
 8000788:	eb43 0002 	adc.w	r0, r3, r2
 800078c:	bf08      	it	eq
 800078e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000792:	4770      	bx	lr

08000794 <__aeabi_fmul>:
 8000794:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000798:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800079c:	bf1e      	ittt	ne
 800079e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007a2:	ea92 0f0c 	teqne	r2, ip
 80007a6:	ea93 0f0c 	teqne	r3, ip
 80007aa:	d06f      	beq.n	800088c <__aeabi_fmul+0xf8>
 80007ac:	441a      	add	r2, r3
 80007ae:	ea80 0c01 	eor.w	ip, r0, r1
 80007b2:	0240      	lsls	r0, r0, #9
 80007b4:	bf18      	it	ne
 80007b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007ba:	d01e      	beq.n	80007fa <__aeabi_fmul+0x66>
 80007bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007c8:	fba0 3101 	umull	r3, r1, r0, r1
 80007cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007d4:	bf3e      	ittt	cc
 80007d6:	0049      	lslcc	r1, r1, #1
 80007d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007dc:	005b      	lslcc	r3, r3, #1
 80007de:	ea40 0001 	orr.w	r0, r0, r1
 80007e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007e6:	2afd      	cmp	r2, #253	; 0xfd
 80007e8:	d81d      	bhi.n	8000826 <__aeabi_fmul+0x92>
 80007ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007f2:	bf08      	it	eq
 80007f4:	f020 0001 	biceq.w	r0, r0, #1
 80007f8:	4770      	bx	lr
 80007fa:	f090 0f00 	teq	r0, #0
 80007fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000802:	bf08      	it	eq
 8000804:	0249      	lsleq	r1, r1, #9
 8000806:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800080a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800080e:	3a7f      	subs	r2, #127	; 0x7f
 8000810:	bfc2      	ittt	gt
 8000812:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000816:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800081a:	4770      	bxgt	lr
 800081c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	3a01      	subs	r2, #1
 8000826:	dc5d      	bgt.n	80008e4 <__aeabi_fmul+0x150>
 8000828:	f112 0f19 	cmn.w	r2, #25
 800082c:	bfdc      	itt	le
 800082e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000832:	4770      	bxle	lr
 8000834:	f1c2 0200 	rsb	r2, r2, #0
 8000838:	0041      	lsls	r1, r0, #1
 800083a:	fa21 f102 	lsr.w	r1, r1, r2
 800083e:	f1c2 0220 	rsb	r2, r2, #32
 8000842:	fa00 fc02 	lsl.w	ip, r0, r2
 8000846:	ea5f 0031 	movs.w	r0, r1, rrx
 800084a:	f140 0000 	adc.w	r0, r0, #0
 800084e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000852:	bf08      	it	eq
 8000854:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000858:	4770      	bx	lr
 800085a:	f092 0f00 	teq	r2, #0
 800085e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000862:	bf02      	ittt	eq
 8000864:	0040      	lsleq	r0, r0, #1
 8000866:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800086a:	3a01      	subeq	r2, #1
 800086c:	d0f9      	beq.n	8000862 <__aeabi_fmul+0xce>
 800086e:	ea40 000c 	orr.w	r0, r0, ip
 8000872:	f093 0f00 	teq	r3, #0
 8000876:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800087a:	bf02      	ittt	eq
 800087c:	0049      	lsleq	r1, r1, #1
 800087e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000882:	3b01      	subeq	r3, #1
 8000884:	d0f9      	beq.n	800087a <__aeabi_fmul+0xe6>
 8000886:	ea41 010c 	orr.w	r1, r1, ip
 800088a:	e78f      	b.n	80007ac <__aeabi_fmul+0x18>
 800088c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000890:	ea92 0f0c 	teq	r2, ip
 8000894:	bf18      	it	ne
 8000896:	ea93 0f0c 	teqne	r3, ip
 800089a:	d00a      	beq.n	80008b2 <__aeabi_fmul+0x11e>
 800089c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008a0:	bf18      	it	ne
 80008a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008a6:	d1d8      	bne.n	800085a <__aeabi_fmul+0xc6>
 80008a8:	ea80 0001 	eor.w	r0, r0, r1
 80008ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008b0:	4770      	bx	lr
 80008b2:	f090 0f00 	teq	r0, #0
 80008b6:	bf17      	itett	ne
 80008b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008bc:	4608      	moveq	r0, r1
 80008be:	f091 0f00 	teqne	r1, #0
 80008c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008c6:	d014      	beq.n	80008f2 <__aeabi_fmul+0x15e>
 80008c8:	ea92 0f0c 	teq	r2, ip
 80008cc:	d101      	bne.n	80008d2 <__aeabi_fmul+0x13e>
 80008ce:	0242      	lsls	r2, r0, #9
 80008d0:	d10f      	bne.n	80008f2 <__aeabi_fmul+0x15e>
 80008d2:	ea93 0f0c 	teq	r3, ip
 80008d6:	d103      	bne.n	80008e0 <__aeabi_fmul+0x14c>
 80008d8:	024b      	lsls	r3, r1, #9
 80008da:	bf18      	it	ne
 80008dc:	4608      	movne	r0, r1
 80008de:	d108      	bne.n	80008f2 <__aeabi_fmul+0x15e>
 80008e0:	ea80 0001 	eor.w	r0, r0, r1
 80008e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f0:	4770      	bx	lr
 80008f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008fa:	4770      	bx	lr

080008fc <__aeabi_fdiv>:
 80008fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000900:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000904:	bf1e      	ittt	ne
 8000906:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800090a:	ea92 0f0c 	teqne	r2, ip
 800090e:	ea93 0f0c 	teqne	r3, ip
 8000912:	d069      	beq.n	80009e8 <__aeabi_fdiv+0xec>
 8000914:	eba2 0203 	sub.w	r2, r2, r3
 8000918:	ea80 0c01 	eor.w	ip, r0, r1
 800091c:	0249      	lsls	r1, r1, #9
 800091e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000922:	d037      	beq.n	8000994 <__aeabi_fdiv+0x98>
 8000924:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000928:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800092c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000930:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000934:	428b      	cmp	r3, r1
 8000936:	bf38      	it	cc
 8000938:	005b      	lslcc	r3, r3, #1
 800093a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800093e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000942:	428b      	cmp	r3, r1
 8000944:	bf24      	itt	cs
 8000946:	1a5b      	subcs	r3, r3, r1
 8000948:	ea40 000c 	orrcs.w	r0, r0, ip
 800094c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000950:	bf24      	itt	cs
 8000952:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000956:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800095e:	bf24      	itt	cs
 8000960:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800096c:	bf24      	itt	cs
 800096e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000972:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000976:	011b      	lsls	r3, r3, #4
 8000978:	bf18      	it	ne
 800097a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800097e:	d1e0      	bne.n	8000942 <__aeabi_fdiv+0x46>
 8000980:	2afd      	cmp	r2, #253	; 0xfd
 8000982:	f63f af50 	bhi.w	8000826 <__aeabi_fmul+0x92>
 8000986:	428b      	cmp	r3, r1
 8000988:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000998:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800099c:	327f      	adds	r2, #127	; 0x7f
 800099e:	bfc2      	ittt	gt
 80009a0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009a4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009a8:	4770      	bxgt	lr
 80009aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ae:	f04f 0300 	mov.w	r3, #0
 80009b2:	3a01      	subs	r2, #1
 80009b4:	e737      	b.n	8000826 <__aeabi_fmul+0x92>
 80009b6:	f092 0f00 	teq	r2, #0
 80009ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009be:	bf02      	ittt	eq
 80009c0:	0040      	lsleq	r0, r0, #1
 80009c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009c6:	3a01      	subeq	r2, #1
 80009c8:	d0f9      	beq.n	80009be <__aeabi_fdiv+0xc2>
 80009ca:	ea40 000c 	orr.w	r0, r0, ip
 80009ce:	f093 0f00 	teq	r3, #0
 80009d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d6:	bf02      	ittt	eq
 80009d8:	0049      	lsleq	r1, r1, #1
 80009da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009de:	3b01      	subeq	r3, #1
 80009e0:	d0f9      	beq.n	80009d6 <__aeabi_fdiv+0xda>
 80009e2:	ea41 010c 	orr.w	r1, r1, ip
 80009e6:	e795      	b.n	8000914 <__aeabi_fdiv+0x18>
 80009e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009ec:	ea92 0f0c 	teq	r2, ip
 80009f0:	d108      	bne.n	8000a04 <__aeabi_fdiv+0x108>
 80009f2:	0242      	lsls	r2, r0, #9
 80009f4:	f47f af7d 	bne.w	80008f2 <__aeabi_fmul+0x15e>
 80009f8:	ea93 0f0c 	teq	r3, ip
 80009fc:	f47f af70 	bne.w	80008e0 <__aeabi_fmul+0x14c>
 8000a00:	4608      	mov	r0, r1
 8000a02:	e776      	b.n	80008f2 <__aeabi_fmul+0x15e>
 8000a04:	ea93 0f0c 	teq	r3, ip
 8000a08:	d104      	bne.n	8000a14 <__aeabi_fdiv+0x118>
 8000a0a:	024b      	lsls	r3, r1, #9
 8000a0c:	f43f af4c 	beq.w	80008a8 <__aeabi_fmul+0x114>
 8000a10:	4608      	mov	r0, r1
 8000a12:	e76e      	b.n	80008f2 <__aeabi_fmul+0x15e>
 8000a14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a18:	bf18      	it	ne
 8000a1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a1e:	d1ca      	bne.n	80009b6 <__aeabi_fdiv+0xba>
 8000a20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a24:	f47f af5c 	bne.w	80008e0 <__aeabi_fmul+0x14c>
 8000a28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a2c:	f47f af3c 	bne.w	80008a8 <__aeabi_fmul+0x114>
 8000a30:	e75f      	b.n	80008f2 <__aeabi_fmul+0x15e>
 8000a32:	bf00      	nop

08000a34 <__aeabi_f2uiz>:
 8000a34:	0042      	lsls	r2, r0, #1
 8000a36:	d20e      	bcs.n	8000a56 <__aeabi_f2uiz+0x22>
 8000a38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a3c:	d30b      	bcc.n	8000a56 <__aeabi_f2uiz+0x22>
 8000a3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a46:	d409      	bmi.n	8000a5c <__aeabi_f2uiz+0x28>
 8000a48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a50:	fa23 f002 	lsr.w	r0, r3, r2
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr
 8000a5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a60:	d101      	bne.n	8000a66 <__aeabi_f2uiz+0x32>
 8000a62:	0242      	lsls	r2, r0, #9
 8000a64:	d102      	bne.n	8000a6c <__aeabi_f2uiz+0x38>
 8000a66:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_ldivmod>:
 8000a74:	b97b      	cbnz	r3, 8000a96 <__aeabi_ldivmod+0x22>
 8000a76:	b972      	cbnz	r2, 8000a96 <__aeabi_ldivmod+0x22>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	bfbe      	ittt	lt
 8000a7c:	2000      	movlt	r0, #0
 8000a7e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a82:	e006      	blt.n	8000a92 <__aeabi_ldivmod+0x1e>
 8000a84:	bf08      	it	eq
 8000a86:	2800      	cmpeq	r0, #0
 8000a88:	bf1c      	itt	ne
 8000a8a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a8e:	f04f 30ff 	movne.w	r0, #4294967295
 8000a92:	f000 b9a9 	b.w	8000de8 <__aeabi_idiv0>
 8000a96:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a9a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	db09      	blt.n	8000ab6 <__aeabi_ldivmod+0x42>
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db1a      	blt.n	8000adc <__aeabi_ldivmod+0x68>
 8000aa6:	f000 f835 	bl	8000b14 <__udivmoddi4>
 8000aaa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab2:	b004      	add	sp, #16
 8000ab4:	4770      	bx	lr
 8000ab6:	4240      	negs	r0, r0
 8000ab8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db1b      	blt.n	8000af8 <__aeabi_ldivmod+0x84>
 8000ac0:	f000 f828 	bl	8000b14 <__udivmoddi4>
 8000ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000acc:	b004      	add	sp, #16
 8000ace:	4240      	negs	r0, r0
 8000ad0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad4:	4252      	negs	r2, r2
 8000ad6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ada:	4770      	bx	lr
 8000adc:	4252      	negs	r2, r2
 8000ade:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ae2:	f000 f817 	bl	8000b14 <__udivmoddi4>
 8000ae6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aee:	b004      	add	sp, #16
 8000af0:	4240      	negs	r0, r0
 8000af2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af6:	4770      	bx	lr
 8000af8:	4252      	negs	r2, r2
 8000afa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000afe:	f000 f809 	bl	8000b14 <__udivmoddi4>
 8000b02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0a:	b004      	add	sp, #16
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9e08      	ldr	r6, [sp, #32]
 8000b1a:	460d      	mov	r5, r1
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	4688      	mov	r8, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d14d      	bne.n	8000bc0 <__udivmoddi4+0xac>
 8000b24:	428a      	cmp	r2, r1
 8000b26:	4694      	mov	ip, r2
 8000b28:	d968      	bls.n	8000bfc <__udivmoddi4+0xe8>
 8000b2a:	fab2 f282 	clz	r2, r2
 8000b2e:	b152      	cbz	r2, 8000b46 <__udivmoddi4+0x32>
 8000b30:	fa01 f302 	lsl.w	r3, r1, r2
 8000b34:	f1c2 0120 	rsb	r1, r2, #32
 8000b38:	fa20 f101 	lsr.w	r1, r0, r1
 8000b3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b40:	ea41 0803 	orr.w	r8, r1, r3
 8000b44:	4094      	lsls	r4, r2
 8000b46:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000b4a:	fbb8 f7f1 	udiv	r7, r8, r1
 8000b4e:	fa1f fe8c 	uxth.w	lr, ip
 8000b52:	fb01 8817 	mls	r8, r1, r7, r8
 8000b56:	fb07 f00e 	mul.w	r0, r7, lr
 8000b5a:	0c23      	lsrs	r3, r4, #16
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	4298      	cmp	r0, r3
 8000b62:	d90a      	bls.n	8000b7a <__udivmoddi4+0x66>
 8000b64:	eb1c 0303 	adds.w	r3, ip, r3
 8000b68:	f107 35ff 	add.w	r5, r7, #4294967295
 8000b6c:	f080 811e 	bcs.w	8000dac <__udivmoddi4+0x298>
 8000b70:	4298      	cmp	r0, r3
 8000b72:	f240 811b 	bls.w	8000dac <__udivmoddi4+0x298>
 8000b76:	3f02      	subs	r7, #2
 8000b78:	4463      	add	r3, ip
 8000b7a:	1a1b      	subs	r3, r3, r0
 8000b7c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000b80:	fb01 3310 	mls	r3, r1, r0, r3
 8000b84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b88:	b2a4      	uxth	r4, r4
 8000b8a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8e:	45a6      	cmp	lr, r4
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x94>
 8000b92:	eb1c 0404 	adds.w	r4, ip, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8109 	bcs.w	8000db0 <__udivmoddi4+0x29c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8106 	bls.w	8000db0 <__udivmoddi4+0x29c>
 8000ba4:	4464      	add	r4, ip
 8000ba6:	3802      	subs	r0, #2
 8000ba8:	2100      	movs	r1, #0
 8000baa:	eba4 040e 	sub.w	r4, r4, lr
 8000bae:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa8>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	40d4      	lsrs	r4, r2
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	d908      	bls.n	8000bd6 <__udivmoddi4+0xc2>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	f000 80ee 	beq.w	8000da6 <__udivmoddi4+0x292>
 8000bca:	2100      	movs	r1, #0
 8000bcc:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	fab3 f183 	clz	r1, r3
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d14a      	bne.n	8000c74 <__udivmoddi4+0x160>
 8000bde:	42ab      	cmp	r3, r5
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xd4>
 8000be2:	4282      	cmp	r2, r0
 8000be4:	f200 80fc 	bhi.w	8000de0 <__udivmoddi4+0x2cc>
 8000be8:	1a84      	subs	r4, r0, r2
 8000bea:	eb65 0303 	sbc.w	r3, r5, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d0e2      	beq.n	8000bbc <__udivmoddi4+0xa8>
 8000bf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfa:	e7df      	b.n	8000bbc <__udivmoddi4+0xa8>
 8000bfc:	b902      	cbnz	r2, 8000c00 <__udivmoddi4+0xec>
 8000bfe:	deff      	udf	#255	; 0xff
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	f040 8091 	bne.w	8000d2c <__udivmoddi4+0x218>
 8000c0a:	eba1 000c 	sub.w	r0, r1, ip
 8000c0e:	2101      	movs	r1, #1
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb0 f3f7 	udiv	r3, r0, r7
 8000c1c:	fb07 0013 	mls	r0, r7, r3, r0
 8000c20:	0c25      	lsrs	r5, r4, #16
 8000c22:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c26:	fb0e f003 	mul.w	r0, lr, r3
 8000c2a:	42a8      	cmp	r0, r5
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x12c>
 8000c2e:	eb1c 0505 	adds.w	r5, ip, r5
 8000c32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x12a>
 8000c38:	42a8      	cmp	r0, r5
 8000c3a:	f200 80ce 	bhi.w	8000dda <__udivmoddi4+0x2c6>
 8000c3e:	4643      	mov	r3, r8
 8000c40:	1a2d      	subs	r5, r5, r0
 8000c42:	fbb5 f0f7 	udiv	r0, r5, r7
 8000c46:	fb07 5510 	mls	r5, r7, r0, r5
 8000c4a:	fb0e fe00 	mul.w	lr, lr, r0
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x156>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x154>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 80b6 	bhi.w	8000dd4 <__udivmoddi4+0x2c0>
 8000c68:	4628      	mov	r0, r5
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c72:	e79e      	b.n	8000bb2 <__udivmoddi4+0x9e>
 8000c74:	f1c1 0720 	rsb	r7, r1, #32
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c82:	fa25 fa07 	lsr.w	sl, r5, r7
 8000c86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c8a:	fbba f8f9 	udiv	r8, sl, r9
 8000c8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c92:	fb09 aa18 	mls	sl, r9, r8, sl
 8000c96:	408d      	lsls	r5, r1
 8000c98:	fa1f fe8c 	uxth.w	lr, ip
 8000c9c:	431d      	orrs	r5, r3
 8000c9e:	fa00 f301 	lsl.w	r3, r0, r1
 8000ca2:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000cac:	42a0      	cmp	r0, r4
 8000cae:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b8>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cbc:	f080 8088 	bcs.w	8000dd0 <__udivmoddi4+0x2bc>
 8000cc0:	42a0      	cmp	r0, r4
 8000cc2:	f240 8085 	bls.w	8000dd0 <__udivmoddi4+0x2bc>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	4464      	add	r4, ip
 8000ccc:	1a24      	subs	r4, r4, r0
 8000cce:	fbb4 f0f9 	udiv	r0, r4, r9
 8000cd2:	fb09 4410 	mls	r4, r9, r0, r4
 8000cd6:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cda:	b2ad      	uxth	r5, r5
 8000cdc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1e2>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cec:	d26c      	bcs.n	8000dc8 <__udivmoddi4+0x2b4>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	d96a      	bls.n	8000dc8 <__udivmoddi4+0x2b4>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4464      	add	r4, ip
 8000cf6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cfa:	fba0 9502 	umull	r9, r5, r0, r2
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	42ac      	cmp	r4, r5
 8000d04:	46c8      	mov	r8, r9
 8000d06:	46ae      	mov	lr, r5
 8000d08:	d356      	bcc.n	8000db8 <__udivmoddi4+0x2a4>
 8000d0a:	d053      	beq.n	8000db4 <__udivmoddi4+0x2a0>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2d0>
 8000d10:	ebb3 0208 	subs.w	r2, r3, r8
 8000d14:	eb64 040e 	sbc.w	r4, r4, lr
 8000d18:	fa22 f301 	lsr.w	r3, r2, r1
 8000d1c:	fa04 f707 	lsl.w	r7, r4, r7
 8000d20:	431f      	orrs	r7, r3
 8000d22:	40cc      	lsrs	r4, r1
 8000d24:	e9c6 7400 	strd	r7, r4, [r6]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa8>
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	f1c2 0120 	rsb	r1, r2, #32
 8000d34:	fa25 f301 	lsr.w	r3, r5, r1
 8000d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3c:	fa20 f101 	lsr.w	r1, r0, r1
 8000d40:	4095      	lsls	r5, r2
 8000d42:	430d      	orrs	r5, r1
 8000d44:	fbb3 f1f7 	udiv	r1, r3, r7
 8000d48:	fb07 3311 	mls	r3, r7, r1, r3
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	0c28      	lsrs	r0, r5, #16
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	fb01 f30e 	mul.w	r3, r1, lr
 8000d5a:	4283      	cmp	r3, r0
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x260>
 8000d62:	eb1c 0000 	adds.w	r0, ip, r0
 8000d66:	f101 38ff 	add.w	r8, r1, #4294967295
 8000d6a:	d22f      	bcs.n	8000dcc <__udivmoddi4+0x2b8>
 8000d6c:	4283      	cmp	r3, r0
 8000d6e:	d92d      	bls.n	8000dcc <__udivmoddi4+0x2b8>
 8000d70:	3902      	subs	r1, #2
 8000d72:	4460      	add	r0, ip
 8000d74:	1ac0      	subs	r0, r0, r3
 8000d76:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d7a:	fb07 0013 	mls	r0, r7, r3, r0
 8000d7e:	b2ad      	uxth	r5, r5
 8000d80:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d84:	fb03 f00e 	mul.w	r0, r3, lr
 8000d88:	42a8      	cmp	r0, r5
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x28a>
 8000d8c:	eb1c 0505 	adds.w	r5, ip, r5
 8000d90:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d94:	d216      	bcs.n	8000dc4 <__udivmoddi4+0x2b0>
 8000d96:	42a8      	cmp	r0, r5
 8000d98:	d914      	bls.n	8000dc4 <__udivmoddi4+0x2b0>
 8000d9a:	3b02      	subs	r3, #2
 8000d9c:	4465      	add	r5, ip
 8000d9e:	1a28      	subs	r0, r5, r0
 8000da0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000da4:	e738      	b.n	8000c18 <__udivmoddi4+0x104>
 8000da6:	4631      	mov	r1, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e707      	b.n	8000bbc <__udivmoddi4+0xa8>
 8000dac:	462f      	mov	r7, r5
 8000dae:	e6e4      	b.n	8000b7a <__udivmoddi4+0x66>
 8000db0:	4618      	mov	r0, r3
 8000db2:	e6f9      	b.n	8000ba8 <__udivmoddi4+0x94>
 8000db4:	454b      	cmp	r3, r9
 8000db6:	d2a9      	bcs.n	8000d0c <__udivmoddi4+0x1f8>
 8000db8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	e7a3      	b.n	8000d0c <__udivmoddi4+0x1f8>
 8000dc4:	4643      	mov	r3, r8
 8000dc6:	e7ea      	b.n	8000d9e <__udivmoddi4+0x28a>
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e794      	b.n	8000cf6 <__udivmoddi4+0x1e2>
 8000dcc:	4641      	mov	r1, r8
 8000dce:	e7d1      	b.n	8000d74 <__udivmoddi4+0x260>
 8000dd0:	46d0      	mov	r8, sl
 8000dd2:	e77b      	b.n	8000ccc <__udivmoddi4+0x1b8>
 8000dd4:	4464      	add	r4, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	e747      	b.n	8000c6a <__udivmoddi4+0x156>
 8000dda:	3b02      	subs	r3, #2
 8000ddc:	4465      	add	r5, ip
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x12c>
 8000de0:	4608      	mov	r0, r1
 8000de2:	e706      	b.n	8000bf2 <__udivmoddi4+0xde>
 8000de4:	4631      	mov	r1, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa8>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params)
 {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2203      	movs	r2, #3
 8000df8:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2203      	movs	r2, #3
 8000e04:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2203      	movs	r2, #3
 8000e16:	715a      	strb	r2, [r3, #5]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value)
 {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b08a      	sub	sp, #40	; 0x28
 8000e26:	af04      	add	r7, sp, #16
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000e3c:	7afb      	ldrb	r3, [r7, #11]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	8af9      	ldrh	r1, [r7, #22]
 8000e42:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e46:	9302      	str	r3, [sp, #8]
 8000e48:	2302      	movs	r3, #2
 8000e4a:	9301      	str	r3, [sp, #4]
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2301      	movs	r3, #1
 8000e54:	f002 fc12 	bl	800367c <HAL_I2C_Mem_Read>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10b      	bne.n	8000e76 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000e5e:	7d7b      	ldrb	r3, [r7, #21]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	7d3b      	ldrb	r3, [r7, #20]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	801a      	strh	r2, [r3, #0]
		return true;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <read_register16+0x56>
	} else
		return false;
 8000e76:	2300      	movs	r3, #0

}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) 
		{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b08b      	sub	sp, #44	; 0x2c
 8000e84:	af04      	add	r7, sp, #16
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	72fb      	strb	r3, [r7, #11]
 8000e90:	4613      	mov	r3, r2
 8000e92:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ea0:	7afb      	ldrb	r3, [r7, #11]
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	7abb      	ldrb	r3, [r7, #10]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	8af9      	ldrh	r1, [r7, #22]
 8000eaa:	f241 3488 	movw	r4, #5000	; 0x1388
 8000eae:	9402      	str	r4, [sp, #8]
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f002 fbe0 	bl	800367c <HAL_I2C_Mem_Read>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <read_data+0x46>
		return 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <read_data+0x48>
	else
		return 1;
 8000ec6:	2301      	movs	r3, #1

}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	371c      	adds	r7, #28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd90      	pop	{r4, r7, pc}

08000ed0 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) 
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	461a      	mov	r2, r3
 8000edc:	2188      	movs	r1, #136	; 0x88
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff9f 	bl	8000e22 <read_register16>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d06f      	beq.n	8000fca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3302      	adds	r3, #2
 8000eee:	461a      	mov	r2, r3
 8000ef0:	218a      	movs	r1, #138	; 0x8a
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ff95 	bl	8000e22 <read_register16>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d065      	beq.n	8000fca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3304      	adds	r3, #4
 8000f02:	461a      	mov	r2, r3
 8000f04:	218c      	movs	r1, #140	; 0x8c
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ff8b 	bl	8000e22 <read_register16>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d05b      	beq.n	8000fca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, (uint16_t *)&dev->dig_P1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3306      	adds	r3, #6
 8000f16:	461a      	mov	r2, r3
 8000f18:	218e      	movs	r1, #142	; 0x8e
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ff81 	bl	8000e22 <read_register16>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d051      	beq.n	8000fca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3308      	adds	r3, #8
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2190      	movs	r1, #144	; 0x90
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff77 	bl	8000e22 <read_register16>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d047      	beq.n	8000fca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	330a      	adds	r3, #10
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2192      	movs	r1, #146	; 0x92
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ff6d 	bl	8000e22 <read_register16>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d03d      	beq.n	8000fca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	330c      	adds	r3, #12
 8000f52:	461a      	mov	r2, r3
 8000f54:	2194      	movs	r1, #148	; 0x94
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff63 	bl	8000e22 <read_register16>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d033      	beq.n	8000fca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	330e      	adds	r3, #14
 8000f66:	461a      	mov	r2, r3
 8000f68:	2196      	movs	r1, #150	; 0x96
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff59 	bl	8000e22 <read_register16>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d029      	beq.n	8000fca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3310      	adds	r3, #16
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	2198      	movs	r1, #152	; 0x98
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff4f 	bl	8000e22 <read_register16>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d01f      	beq.n	8000fca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3312      	adds	r3, #18
 8000f8e:	461a      	mov	r2, r3
 8000f90:	219a      	movs	r1, #154	; 0x9a
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ff45 	bl	8000e22 <read_register16>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d015      	beq.n	8000fca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3314      	adds	r3, #20
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	219c      	movs	r1, #156	; 0x9c
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff3b 	bl	8000e22 <read_register16>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00b      	beq.n	8000fca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e, (uint16_t *) &dev->dig_P9)) 
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3316      	adds	r3, #22
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	219e      	movs	r1, #158	; 0x9e
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ff31 	bl	8000e22 <read_register16>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <read_calibration_data+0xfa>
	{

		return true;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <read_calibration_data+0xfc>
	}

	return false;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) 
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f103 0218 	add.w	r2, r3, #24
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	21a1      	movs	r1, #161	; 0xa1
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ff4a 	bl	8000e80 <read_data>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d14b      	bne.n	800108a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	331a      	adds	r3, #26
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	21e1      	movs	r1, #225	; 0xe1
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ff11 	bl	8000e22 <read_register16>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d041      	beq.n	800108a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f103 021c 	add.w	r2, r3, #28
 800100c:	2301      	movs	r3, #1
 800100e:	21e3      	movs	r1, #227	; 0xe3
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff35 	bl	8000e80 <read_data>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d136      	bne.n	800108a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800101c:	f107 030e 	add.w	r3, r7, #14
 8001020:	461a      	mov	r2, r3
 8001022:	21e4      	movs	r1, #228	; 0xe4
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff fefc 	bl	8000e22 <read_register16>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d02c      	beq.n	800108a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	461a      	mov	r2, r3
 8001036:	21e5      	movs	r1, #229	; 0xe5
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff fef2 	bl	8000e22 <read_register16>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d022      	beq.n	800108a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800104a:	2301      	movs	r3, #1
 800104c:	21e7      	movs	r1, #231	; 0xe7
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff16 	bl	8000e80 <read_data>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d117      	bne.n	800108a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	b21b      	sxth	r3, r3
 8001060:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001064:	b21a      	sxth	r2, r3
 8001066:	89fb      	ldrh	r3, [r7, #14]
 8001068:	121b      	asrs	r3, r3, #8
 800106a:	b21b      	sxth	r3, r3
 800106c:	f003 030f 	and.w	r3, r3, #15
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21a      	sxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800107a:	89bb      	ldrh	r3, [r7, #12]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	b29b      	uxth	r3, r3
 8001080:	b21a      	sxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	841a      	strh	r2, [r3, #32]

		return true;
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <read_hum_calibration_data+0xb8>
	}

	return false;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af04      	add	r7, sp, #16
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
 80010a0:	4613      	mov	r3, r2
 80010a2:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	89f9      	ldrh	r1, [r7, #14]
 80010b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	1cbb      	adds	r3, r7, #2
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	f002 f9df 	bl	8003488 <HAL_I2C_Mem_Write>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <write_register8+0x40>
		return false;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e000      	b.n	80010d6 <write_register8+0x42>
	else
		return true;
 80010d4:	2301      	movs	r3, #1
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010ec:	2b76      	cmp	r3, #118	; 0x76
 80010ee:	d005      	beq.n	80010fc <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010f4:	2b77      	cmp	r3, #119	; 0x77
 80010f6:	d001      	beq.n	80010fc <bmp280_init+0x1e>

		return false;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e099      	b.n	8001230 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001102:	2301      	movs	r3, #1
 8001104:	21d0      	movs	r1, #208	; 0xd0
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff feba 	bl	8000e80 <read_data>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <bmp280_init+0x38>
		return false;
 8001112:	2300      	movs	r3, #0
 8001114:	e08c      	b.n	8001230 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800111c:	2b58      	cmp	r3, #88	; 0x58
 800111e:	d006      	beq.n	800112e <bmp280_init+0x50>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001126:	2b60      	cmp	r3, #96	; 0x60
 8001128:	d001      	beq.n	800112e <bmp280_init+0x50>

		return false;
 800112a:	2300      	movs	r3, #0
 800112c:	e080      	b.n	8001230 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800112e:	22b6      	movs	r2, #182	; 0xb6
 8001130:	21e0      	movs	r1, #224	; 0xe0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffae 	bl	8001094 <write_register8>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <bmp280_init+0x64>
		return false;
 800113e:	2300      	movs	r3, #0
 8001140:	e076      	b.n	8001230 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001142:	f107 020c 	add.w	r2, r7, #12
 8001146:	2301      	movs	r3, #1
 8001148:	21f3      	movs	r1, #243	; 0xf3
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff fe98 	bl	8000e80 <read_data>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f5      	bne.n	8001142 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001156:	7b3b      	ldrb	r3, [r7, #12]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f0      	bne.n	8001142 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff feb5 	bl	8000ed0 <read_calibration_data>
 8001166:	4603      	mov	r3, r0
 8001168:	f083 0301 	eor.w	r3, r3, #1
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d100      	bne.n	8001174 <bmp280_init+0x96>
 8001172:	e001      	b.n	8001178 <bmp280_init+0x9a>
		return false;
 8001174:	2300      	movs	r3, #0
 8001176:	e05b      	b.n	8001230 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800117e:	2b60      	cmp	r3, #96	; 0x60
 8001180:	d10a      	bne.n	8001198 <bmp280_init+0xba>
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff26 	bl	8000fd4 <read_hum_calibration_data>
 8001188:	4603      	mov	r3, r0
 800118a:	f083 0301 	eor.w	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <bmp280_init+0xba>
		return false;
 8001194:	2300      	movs	r3, #0
 8001196:	e04b      	b.n	8001230 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	795b      	ldrb	r3, [r3, #5]
 800119c:	015b      	lsls	r3, r3, #5
 800119e:	b25a      	sxtb	r2, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	785b      	ldrb	r3, [r3, #1]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	461a      	mov	r2, r3
 80011b2:	21f5      	movs	r1, #245	; 0xf5
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff6d 	bl	8001094 <write_register8>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <bmp280_init+0xe6>
		return false;
 80011c0:	2300      	movs	r3, #0
 80011c2:	e035      	b.n	8001230 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d102      	bne.n	80011d2 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	78db      	ldrb	r3, [r3, #3]
 80011d6:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80011d8:	b25a      	sxtb	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	789b      	ldrb	r3, [r3, #2]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b25a      	sxtb	r2, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80011f0:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80011f8:	2b60      	cmp	r3, #96	; 0x60
 80011fa:	d10d      	bne.n	8001218 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	791b      	ldrb	r3, [r3, #4]
 8001200:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001202:	7b7b      	ldrb	r3, [r7, #13]
 8001204:	461a      	mov	r2, r3
 8001206:	21f2      	movs	r1, #242	; 0xf2
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff43 	bl	8001094 <write_register8>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <bmp280_init+0x13a>
			return false;
 8001214:	2300      	movs	r3, #0
 8001216:	e00b      	b.n	8001230 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001218:	7bbb      	ldrb	r3, [r7, #14]
 800121a:	461a      	mov	r2, r3
 800121c:	21f4      	movs	r1, #244	; 0xf4
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff38 	bl	8001094 <write_register8>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <bmp280_init+0x150>
		return false;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <bmp280_init+0x152>
	}

	return true;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	10da      	asrs	r2, r3, #3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001256:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800125a:	12db      	asrs	r3, r3, #11
 800125c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	111b      	asrs	r3, r3, #4
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	8812      	ldrh	r2, [r2, #0]
 8001266:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	1112      	asrs	r2, r2, #4
 800126c:	68f9      	ldr	r1, [r7, #12]
 800126e:	8809      	ldrh	r1, [r1, #0]
 8001270:	1a52      	subs	r2, r2, r1
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800127e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001282:	139b      	asrs	r3, r3, #14
 8001284:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	441a      	add	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	3380      	adds	r3, #128	; 0x80
 800129c:	121b      	asrs	r3, r3, #8
}
 800129e:	4618      	mov	r0, r3
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80012a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012ac:	b0cc      	sub	sp, #304	; 0x130
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80012b4:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80012b8:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80012bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012c0:	17da      	asrs	r2, r3, #31
 80012c2:	461c      	mov	r4, r3
 80012c4:	4615      	mov	r5, r2
 80012c6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80012ca:	f145 3bff 	adc.w	fp, r5, #4294967295
 80012ce:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80012d2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80012d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012da:	fb03 f102 	mul.w	r1, r3, r2
 80012de:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80012e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	18ca      	adds	r2, r1, r3
 80012ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012f0:	fba3 8903 	umull	r8, r9, r3, r3
 80012f4:	eb02 0309 	add.w	r3, r2, r9
 80012f8:	4699      	mov	r9, r3
 80012fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012fe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001302:	b21b      	sxth	r3, r3
 8001304:	17da      	asrs	r2, r3, #31
 8001306:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800130a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800130e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001312:	4603      	mov	r3, r0
 8001314:	fb03 f209 	mul.w	r2, r3, r9
 8001318:	460b      	mov	r3, r1
 800131a:	fb08 f303 	mul.w	r3, r8, r3
 800131e:	4413      	add	r3, r2
 8001320:	4602      	mov	r2, r0
 8001322:	fba8 2102 	umull	r2, r1, r8, r2
 8001326:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800132a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800132e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001332:	4413      	add	r3, r2
 8001334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001338:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800133c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001340:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001348:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800134c:	b21b      	sxth	r3, r3
 800134e:	17da      	asrs	r2, r3, #31
 8001350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001354:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001358:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800135c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001360:	462a      	mov	r2, r5
 8001362:	fb02 f203 	mul.w	r2, r2, r3
 8001366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800136a:	4621      	mov	r1, r4
 800136c:	fb01 f303 	mul.w	r3, r1, r3
 8001370:	441a      	add	r2, r3
 8001372:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001376:	4621      	mov	r1, r4
 8001378:	fba3 3101 	umull	r3, r1, r3, r1
 800137c:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001380:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001388:	18d3      	adds	r3, r2, r3
 800138a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800138e:	f04f 0000 	mov.w	r0, #0
 8001392:	f04f 0100 	mov.w	r1, #0
 8001396:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800139a:	462b      	mov	r3, r5
 800139c:	0459      	lsls	r1, r3, #17
 800139e:	4622      	mov	r2, r4
 80013a0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80013a4:	4623      	mov	r3, r4
 80013a6:	0458      	lsls	r0, r3, #17
 80013a8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80013ac:	1814      	adds	r4, r2, r0
 80013ae:	643c      	str	r4, [r7, #64]	; 0x40
 80013b0:	414b      	adcs	r3, r1
 80013b2:	647b      	str	r3, [r7, #68]	; 0x44
 80013b4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80013b8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80013bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013c0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	17da      	asrs	r2, r3, #31
 80013c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80013cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80013d0:	f04f 0000 	mov.w	r0, #0
 80013d4:	f04f 0100 	mov.w	r1, #0
 80013d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013dc:	00d9      	lsls	r1, r3, #3
 80013de:	2000      	movs	r0, #0
 80013e0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80013e4:	1814      	adds	r4, r2, r0
 80013e6:	63bc      	str	r4, [r7, #56]	; 0x38
 80013e8:	414b      	adcs	r3, r1
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013ec:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80013f0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80013f4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80013f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013fc:	fb03 f102 	mul.w	r1, r3, r2
 8001400:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001404:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	18ca      	adds	r2, r1, r3
 800140e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001412:	fba3 3103 	umull	r3, r1, r3, r3
 8001416:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800141a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800141e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001422:	18d3      	adds	r3, r2, r3
 8001424:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800142c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001430:	b21b      	sxth	r3, r3
 8001432:	17da      	asrs	r2, r3, #31
 8001434:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001438:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800143c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001440:	4622      	mov	r2, r4
 8001442:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001446:	4641      	mov	r1, r8
 8001448:	fb01 f202 	mul.w	r2, r1, r2
 800144c:	464d      	mov	r5, r9
 800144e:	4618      	mov	r0, r3
 8001450:	4621      	mov	r1, r4
 8001452:	4603      	mov	r3, r0
 8001454:	fb03 f305 	mul.w	r3, r3, r5
 8001458:	4413      	add	r3, r2
 800145a:	4602      	mov	r2, r0
 800145c:	4641      	mov	r1, r8
 800145e:	fba2 2101 	umull	r2, r1, r2, r1
 8001462:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001466:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800146a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800146e:	4413      	add	r3, r2
 8001470:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001474:	f04f 0000 	mov.w	r0, #0
 8001478:	f04f 0100 	mov.w	r1, #0
 800147c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001480:	4623      	mov	r3, r4
 8001482:	0a18      	lsrs	r0, r3, #8
 8001484:	462a      	mov	r2, r5
 8001486:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800148a:	462b      	mov	r3, r5
 800148c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800148e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001492:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001496:	b21b      	sxth	r3, r3
 8001498:	17da      	asrs	r2, r3, #31
 800149a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800149e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014a6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80014aa:	464a      	mov	r2, r9
 80014ac:	fb02 f203 	mul.w	r2, r2, r3
 80014b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014b4:	4644      	mov	r4, r8
 80014b6:	fb04 f303 	mul.w	r3, r4, r3
 80014ba:	441a      	add	r2, r3
 80014bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014c0:	4644      	mov	r4, r8
 80014c2:	fba3 3404 	umull	r3, r4, r3, r4
 80014c6:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 80014ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80014ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80014d2:	18d3      	adds	r3, r2, r3
 80014d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80014e4:	464c      	mov	r4, r9
 80014e6:	0323      	lsls	r3, r4, #12
 80014e8:	46c4      	mov	ip, r8
 80014ea:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 80014ee:	4644      	mov	r4, r8
 80014f0:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80014f2:	1884      	adds	r4, r0, r2
 80014f4:	633c      	str	r4, [r7, #48]	; 0x30
 80014f6:	eb41 0303 	adc.w	r3, r1, r3
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
 80014fc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001500:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001504:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001508:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800150c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001510:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001518:	88db      	ldrh	r3, [r3, #6]
 800151a:	b29b      	uxth	r3, r3
 800151c:	2200      	movs	r2, #0
 800151e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001522:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001526:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800152a:	4622      	mov	r2, r4
 800152c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001530:	4641      	mov	r1, r8
 8001532:	fb01 f202 	mul.w	r2, r1, r2
 8001536:	464d      	mov	r5, r9
 8001538:	4618      	mov	r0, r3
 800153a:	4621      	mov	r1, r4
 800153c:	4603      	mov	r3, r0
 800153e:	fb03 f305 	mul.w	r3, r3, r5
 8001542:	4413      	add	r3, r2
 8001544:	4602      	mov	r2, r0
 8001546:	4641      	mov	r1, r8
 8001548:	fba2 2101 	umull	r2, r1, r2, r1
 800154c:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001550:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001554:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001558:	4413      	add	r3, r2
 800155a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800156a:	4629      	mov	r1, r5
 800156c:	104a      	asrs	r2, r1, #1
 800156e:	4629      	mov	r1, r5
 8001570:	17cb      	asrs	r3, r1, #31
 8001572:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001576:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800157a:	4313      	orrs	r3, r2
 800157c:	d101      	bne.n	8001582 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 800157e:	2300      	movs	r3, #0
 8001580:	e146      	b.n	8001810 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001582:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001586:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800158a:	17da      	asrs	r2, r3, #31
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
 800158e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001590:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001594:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001598:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800159c:	105b      	asrs	r3, r3, #1
 800159e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80015a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80015a6:	07db      	lsls	r3, r3, #31
 80015a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015ac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015b0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80015b4:	4604      	mov	r4, r0
 80015b6:	1aa4      	subs	r4, r4, r2
 80015b8:	67bc      	str	r4, [r7, #120]	; 0x78
 80015ba:	eb61 0303 	sbc.w	r3, r1, r3
 80015be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015c0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015c4:	4622      	mov	r2, r4
 80015c6:	462b      	mov	r3, r5
 80015c8:	1891      	adds	r1, r2, r2
 80015ca:	6239      	str	r1, [r7, #32]
 80015cc:	415b      	adcs	r3, r3
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
 80015d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015d4:	4621      	mov	r1, r4
 80015d6:	1851      	adds	r1, r2, r1
 80015d8:	61b9      	str	r1, [r7, #24]
 80015da:	4629      	mov	r1, r5
 80015dc:	414b      	adcs	r3, r1
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015ec:	4649      	mov	r1, r9
 80015ee:	018b      	lsls	r3, r1, #6
 80015f0:	4641      	mov	r1, r8
 80015f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015f6:	4641      	mov	r1, r8
 80015f8:	018a      	lsls	r2, r1, #6
 80015fa:	4641      	mov	r1, r8
 80015fc:	1889      	adds	r1, r1, r2
 80015fe:	6139      	str	r1, [r7, #16]
 8001600:	4649      	mov	r1, r9
 8001602:	eb43 0101 	adc.w	r1, r3, r1
 8001606:	6179      	str	r1, [r7, #20]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001614:	4649      	mov	r1, r9
 8001616:	008b      	lsls	r3, r1, #2
 8001618:	46c4      	mov	ip, r8
 800161a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 800161e:	4641      	mov	r1, r8
 8001620:	008a      	lsls	r2, r1, #2
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	4603      	mov	r3, r0
 8001628:	4622      	mov	r2, r4
 800162a:	189b      	adds	r3, r3, r2
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	460b      	mov	r3, r1
 8001630:	462a      	mov	r2, r5
 8001632:	eb42 0303 	adc.w	r3, r2, r3
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001644:	4649      	mov	r1, r9
 8001646:	008b      	lsls	r3, r1, #2
 8001648:	46c4      	mov	ip, r8
 800164a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 800164e:	4641      	mov	r1, r8
 8001650:	008a      	lsls	r2, r1, #2
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	4603      	mov	r3, r0
 8001658:	4622      	mov	r2, r4
 800165a:	189b      	adds	r3, r3, r2
 800165c:	673b      	str	r3, [r7, #112]	; 0x70
 800165e:	462b      	mov	r3, r5
 8001660:	460a      	mov	r2, r1
 8001662:	eb42 0303 	adc.w	r3, r2, r3
 8001666:	677b      	str	r3, [r7, #116]	; 0x74
 8001668:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800166c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001670:	f7ff fa00 	bl	8000a74 <__aeabi_ldivmod>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800167c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001680:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001684:	b21b      	sxth	r3, r3
 8001686:	17da      	asrs	r2, r3, #31
 8001688:	66bb      	str	r3, [r7, #104]	; 0x68
 800168a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800168c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001690:	f04f 0000 	mov.w	r0, #0
 8001694:	f04f 0100 	mov.w	r1, #0
 8001698:	0b50      	lsrs	r0, r2, #13
 800169a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800169e:	1359      	asrs	r1, r3, #13
 80016a0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80016a4:	462b      	mov	r3, r5
 80016a6:	fb00 f203 	mul.w	r2, r0, r3
 80016aa:	4623      	mov	r3, r4
 80016ac:	fb03 f301 	mul.w	r3, r3, r1
 80016b0:	4413      	add	r3, r2
 80016b2:	4622      	mov	r2, r4
 80016b4:	fba2 2100 	umull	r2, r1, r2, r0
 80016b8:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80016bc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80016c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80016c4:	4413      	add	r3, r2
 80016c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80016ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80016ce:	f04f 0000 	mov.w	r0, #0
 80016d2:	f04f 0100 	mov.w	r1, #0
 80016d6:	0b50      	lsrs	r0, r2, #13
 80016d8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80016dc:	1359      	asrs	r1, r3, #13
 80016de:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80016e2:	462b      	mov	r3, r5
 80016e4:	fb00 f203 	mul.w	r2, r0, r3
 80016e8:	4623      	mov	r3, r4
 80016ea:	fb03 f301 	mul.w	r3, r3, r1
 80016ee:	4413      	add	r3, r2
 80016f0:	4622      	mov	r2, r4
 80016f2:	fba2 2100 	umull	r2, r1, r2, r0
 80016f6:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80016fa:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80016fe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001702:	4413      	add	r3, r2
 8001704:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001714:	4621      	mov	r1, r4
 8001716:	0e4a      	lsrs	r2, r1, #25
 8001718:	4620      	mov	r0, r4
 800171a:	4629      	mov	r1, r5
 800171c:	460c      	mov	r4, r1
 800171e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001722:	164b      	asrs	r3, r1, #25
 8001724:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800172c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001730:	b21b      	sxth	r3, r3
 8001732:	17da      	asrs	r2, r3, #31
 8001734:	663b      	str	r3, [r7, #96]	; 0x60
 8001736:	667a      	str	r2, [r7, #100]	; 0x64
 8001738:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800173c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001740:	462a      	mov	r2, r5
 8001742:	fb02 f203 	mul.w	r2, r2, r3
 8001746:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800174a:	4621      	mov	r1, r4
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001756:	4621      	mov	r1, r4
 8001758:	fba2 2101 	umull	r2, r1, r2, r1
 800175c:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8001760:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001764:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001768:	4413      	add	r3, r2
 800176a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800177a:	4621      	mov	r1, r4
 800177c:	0cca      	lsrs	r2, r1, #19
 800177e:	4620      	mov	r0, r4
 8001780:	4629      	mov	r1, r5
 8001782:	460c      	mov	r4, r1
 8001784:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001788:	14cb      	asrs	r3, r1, #19
 800178a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800178e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001792:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001796:	1884      	adds	r4, r0, r2
 8001798:	65bc      	str	r4, [r7, #88]	; 0x58
 800179a:	eb41 0303 	adc.w	r3, r1, r3
 800179e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017a4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80017a8:	4621      	mov	r1, r4
 80017aa:	1889      	adds	r1, r1, r2
 80017ac:	6539      	str	r1, [r7, #80]	; 0x50
 80017ae:	4629      	mov	r1, r5
 80017b0:	eb43 0101 	adc.w	r1, r3, r1
 80017b4:	6579      	str	r1, [r7, #84]	; 0x54
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80017c2:	4623      	mov	r3, r4
 80017c4:	0a18      	lsrs	r0, r3, #8
 80017c6:	462a      	mov	r2, r5
 80017c8:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80017cc:	462b      	mov	r3, r5
 80017ce:	1219      	asrs	r1, r3, #8
 80017d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80017d8:	b21b      	sxth	r3, r3
 80017da:	17da      	asrs	r2, r3, #31
 80017dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80017de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80017ec:	464c      	mov	r4, r9
 80017ee:	0123      	lsls	r3, r4, #4
 80017f0:	46c4      	mov	ip, r8
 80017f2:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 80017f6:	4644      	mov	r4, r8
 80017f8:	0122      	lsls	r2, r4, #4
 80017fa:	1884      	adds	r4, r0, r2
 80017fc:	603c      	str	r4, [r7, #0]
 80017fe:	eb41 0303 	adc.w	r3, r1, r3
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001808:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 800180c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001810:	4618      	mov	r0, r3
 8001812:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001816:	46bd      	mov	sp, r7
 8001818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800181c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800182e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	039a      	lsls	r2, r3, #14
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800183a:	051b      	lsls	r3, r3, #20
 800183c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001844:	4619      	mov	r1, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001852:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800185a:	4611      	mov	r1, r2
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	fb01 f202 	mul.w	r2, r1, r2
 8001862:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	7f09      	ldrb	r1, [r1, #28]
 8001868:	4608      	mov	r0, r1
 800186a:	6979      	ldr	r1, [r7, #20]
 800186c:	fb00 f101 	mul.w	r1, r0, r1
 8001870:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001872:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001876:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800187a:	1292      	asrs	r2, r2, #10
 800187c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001880:	68f9      	ldr	r1, [r7, #12]
 8001882:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001886:	fb01 f202 	mul.w	r2, r1, r2
 800188a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800188e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	13db      	asrs	r3, r3, #15
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	13d2      	asrs	r2, r2, #15
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	7e12      	ldrb	r2, [r2, #24]
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80018ba:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80018c2:	bfa8      	it	ge
 80018c4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80018c8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	131b      	asrs	r3, r3, #12
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	; 0x30
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80018ec:	2b60      	cmp	r3, #96	; 0x60
 80018ee:	d007      	beq.n	8001900 <bmp280_read_fixed+0x28>
		if (humidity)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <bmp280_read_fixed+0x24>
			*humidity = 0;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <bmp280_read_fixed+0x32>
 8001906:	2308      	movs	r3, #8
 8001908:	e000      	b.n	800190c <bmp280_read_fixed+0x34>
 800190a:	2306      	movs	r3, #6
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f107 0218 	add.w	r2, r7, #24
 8001916:	21f7      	movs	r1, #247	; 0xf7
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f7ff fab1 	bl	8000e80 <read_data>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <bmp280_read_fixed+0x50>
		return false;
 8001924:	2300      	movs	r3, #0
 8001926:	e038      	b.n	800199a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001928:	7e3b      	ldrb	r3, [r7, #24]
 800192a:	031a      	lsls	r2, r3, #12
 800192c:	7e7b      	ldrb	r3, [r7, #25]
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4313      	orrs	r3, r2
 8001932:	7eba      	ldrb	r2, [r7, #26]
 8001934:	0912      	lsrs	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	4313      	orrs	r3, r2
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800193c:	7efb      	ldrb	r3, [r7, #27]
 800193e:	031a      	lsls	r2, r3, #12
 8001940:	7f3b      	ldrb	r3, [r7, #28]
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	4313      	orrs	r3, r2
 8001946:	7f7a      	ldrb	r2, [r7, #29]
 8001948:	0912      	lsrs	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	4313      	orrs	r3, r2
 800194e:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	461a      	mov	r2, r3
 8001956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff fc6d 	bl	8001238 <compensate_temperature>
 800195e:	4602      	mov	r2, r0
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	461a      	mov	r2, r3
 8001968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7ff fc9c 	bl	80012a8 <compensate_pressure>
 8001970:	4602      	mov	r2, r0
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00d      	beq.n	8001998 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800197c:	7fbb      	ldrb	r3, [r7, #30]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	7ffa      	ldrb	r2, [r7, #31]
 8001982:	4313      	orrs	r3, r2
 8001984:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	461a      	mov	r2, r3
 800198a:	6a39      	ldr	r1, [r7, #32]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7ff ff45 	bl	800181c <compensate_humidity>
 8001992:	4602      	mov	r2, r0
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001998:	2301      	movs	r3, #1
}
 800199a:	4618      	mov	r0, r3
 800199c:	3730      	adds	r7, #48	; 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <bmp280_read_float+0x1a>
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	e000      	b.n	80019c0 <bmp280_read_float+0x1c>
 80019be:	2300      	movs	r3, #0
 80019c0:	f107 0218 	add.w	r2, r7, #24
 80019c4:	f107 011c 	add.w	r1, r7, #28
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f7ff ff85 	bl	80018d8 <bmp280_read_fixed>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d02d      	beq.n	8001a30 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fe88 	bl	80006ec <__aeabi_i2f>
 80019dc:	4603      	mov	r3, r0
 80019de:	4917      	ldr	r1, [pc, #92]	; (8001a3c <bmp280_read_float+0x98>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe ff8b 	bl	80008fc <__aeabi_fdiv>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fe77 	bl	80006e4 <__aeabi_ui2f>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe ff7d 	bl	80008fc <__aeabi_fdiv>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	601a      	str	r2, [r3, #0]
		if (humidity)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00d      	beq.n	8001a2c <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fe66 	bl	80006e4 <__aeabi_ui2f>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe ff6c 	bl	80008fc <__aeabi_fdiv>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	601a      	str	r2, [r3, #0]
		return true;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <bmp280_read_float+0x8e>
	}

	return false;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	42c80000 	.word	0x42c80000

08001a40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 0310 	add.w	r3, r7, #16
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a54:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a30      	ldr	r2, [pc, #192]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a5a:	f043 0320 	orr.w	r3, r3, #32
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0320 	and.w	r3, r3, #32
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a2a      	ldr	r2, [pc, #168]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a84:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a24      	ldr	r2, [pc, #144]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a8a:	f043 0308 	orr.w	r3, r3, #8
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAMPS_GPIO_Port, LAMPS_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	481f      	ldr	r0, [pc, #124]	; (8001b20 <MX_GPIO_Init+0xe0>)
 8001aa2:	f001 fa75 	bl	8002f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMPS_Pin;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LAMPS_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	4619      	mov	r1, r3
 8001abc:	4818      	ldr	r0, [pc, #96]	; (8001b20 <MX_GPIO_Init+0xe0>)
 8001abe:	f001 f8e3 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_ENCODER_Pin;
 8001ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <MX_GPIO_Init+0xe4>)
 8001aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4812      	ldr	r0, [pc, #72]	; (8001b20 <MX_GPIO_Init+0xe0>)
 8001ad8:	f001 f8d6 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_DOOR_Pin;
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_GPIO_Init+0xe8>)
 8001ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_DOOR_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	4619      	mov	r1, r3
 8001aee:	480f      	ldr	r0, [pc, #60]	; (8001b2c <MX_GPIO_Init+0xec>)
 8001af0:	f001 f8ca 	bl	8002c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2017      	movs	r0, #23
 8001afa:	f001 f88e 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001afe:	2017      	movs	r0, #23
 8001b00:	f001 f8a7 	bl	8002c52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2028      	movs	r0, #40	; 0x28
 8001b0a:	f001 f886 	bl	8002c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b0e:	2028      	movs	r0, #40	; 0x28
 8001b10:	f001 f89f 	bl	8002c52 <HAL_NVIC_EnableIRQ>

}
 8001b14:	bf00      	nop
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010800 	.word	0x40010800
 8001b24:	10110000 	.word	0x10110000
 8001b28:	10310000 	.word	0x10310000
 8001b2c:	40010c00 	.word	0x40010c00

08001b30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b36:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <MX_I2C1_Init+0x54>)
 8001b38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b3c:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <MX_I2C1_Init+0x58>)
 8001b3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <MX_I2C1_Init+0x50>)
 8001b6e:	f001 fa49 	bl	8003004 <HAL_I2C_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b78:	f000 faf7 	bl	800216a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000094 	.word	0x20000094
 8001b84:	40005400 	.word	0x40005400
 8001b88:	000186a0 	.word	0x000186a0

08001b8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <HAL_I2C_MspInit+0x90>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d132      	bne.n	8001c12 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_I2C_MspInit+0x94>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <HAL_I2C_MspInit+0x94>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <HAL_I2C_MspInit+0x94>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bca:	2312      	movs	r3, #18
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4812      	ldr	r0, [pc, #72]	; (8001c24 <HAL_I2C_MspInit+0x98>)
 8001bda:	f001 f855 	bl	8002c88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_I2C_MspInit+0x9c>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	f043 0302 	orr.w	r3, r3, #2
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf4:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <HAL_I2C_MspInit+0x9c>)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_I2C_MspInit+0x94>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <HAL_I2C_MspInit+0x94>)
 8001c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_I2C_MspInit+0x94>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40005400 	.word	0x40005400
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40010c00 	.word	0x40010c00
 8001c28:	40010000 	.word	0x40010000

08001c2c <lcd1602_Send_init_Data>:

/*============================Вспомогательные функции============================*/
/*-------------Функция для отправки данных при инициализации дисплея-------------*/
/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	6078      	str	r0, [r7, #4]
	if (backlight) {
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <lcd1602_Send_init_Data+0x80>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	e006      	b.n	8001c5a <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	f023 0308 	bic.w	r3, r3, #8
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8001c68:	230a      	movs	r3, #10
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	214e      	movs	r1, #78	; 0x4e
 8001c72:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <lcd1602_Send_init_Data+0x84>)
 8001c74:	f001 fb0a 	bl	800328c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001c78:	2005      	movs	r0, #5
 8001c7a:	f000 fed3 	bl	8002a24 <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	f023 0304 	bic.w	r3, r3, #4
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8001c8c:	230a      	movs	r3, #10
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	214e      	movs	r1, #78	; 0x4e
 8001c96:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <lcd1602_Send_init_Data+0x84>)
 8001c98:	f001 faf8 	bl	800328c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001c9c:	2005      	movs	r0, #5
 8001c9e:	f000 fec1 	bl	8002a24 <HAL_Delay>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000094 	.word	0x20000094

08001cb4 <lcd1602_Send_data>:
/*----------------------Функция отправки байта данных----------------------------*/

/*----------------------Основная функция для отправки данных---------------------*/
/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	6078      	str	r0, [r7, #4]

	if (backlight) {
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <lcd1602_Send_data+0x74>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e006      	b.n	8001ce2 <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	f023 0308 	bic.w	r3, r3, #8
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 8001cf0:	230a      	movs	r3, #10
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	214e      	movs	r1, #78	; 0x4e
 8001cfa:	480c      	ldr	r0, [pc, #48]	; (8001d2c <lcd1602_Send_data+0x78>)
 8001cfc:	f001 fac6 	bl	800328c <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 8001d0e:	230a      	movs	r3, #10
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2301      	movs	r3, #1
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	214e      	movs	r1, #78	; 0x4e
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <lcd1602_Send_data+0x78>)
 8001d1a:	f001 fab7 	bl	800328c <HAL_I2C_Master_Transmit>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	20000094 	.word	0x20000094

08001d30 <lcd1602_Init>:
/*----------------------Основная функция для отправки данных---------------------*/
/*============================Вспомогательные функции============================*/

/*-------------------------Функция инициализации дисплея-------------------------*/
/// Функция инициализации дисплея
void lcd1602_Init(void) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
	/*========Включить питание========*/
	uint8_t tx_buffer = 0x30;
 8001d36:	2330      	movs	r3, #48	; 0x30
 8001d38:	71fb      	strb	r3, [r7, #7]
	/*========Ожидать 20 мс========*/
	HAL_Delay(20);
 8001d3a:	2014      	movs	r0, #20
 8001d3c:	f000 fe72 	bl	8002a24 <HAL_Delay>
	/*========Установить разрядность интерфейса========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8001d40:	1dfb      	adds	r3, r7, #7
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff72 	bl	8001c2c <lcd1602_Send_init_Data>
	/*========Ожидать 40 мкс========*/
	HAL_Delay(1);
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f000 fe6b 	bl	8002a24 <HAL_Delay>
	/*========Установить разрядность интерфейса========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff6b 	bl	8001c2c <lcd1602_Send_init_Data>
	/*========Ожидать 40 мкс========*/
	HAL_Delay(1);
 8001d56:	2001      	movs	r0, #1
 8001d58:	f000 fe64 	bl	8002a24 <HAL_Delay>
	/*========Установить разрядность интерфейса========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8001d5c:	1dfb      	adds	r3, r7, #7
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff64 	bl	8001c2c <lcd1602_Send_init_Data>
	/*========Ожидать 40 мкс========*/
	HAL_Delay(1);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f000 fe5d 	bl	8002a24 <HAL_Delay>
	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5b 	bl	8001c2c <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======Выбираем 2 страницу символов======*/
	tx_buffer = 0x20;
 8001d76:	2320      	movs	r3, #32
 8001d78:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001d7a:	1dfb      	adds	r3, r7, #7
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff55 	bl	8001c2c <lcd1602_Send_init_Data>
	tx_buffer = 0xA0;
 8001d82:	23a0      	movs	r3, #160	; 0xa0
 8001d84:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001d86:	1dfb      	adds	r3, r7, #7
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff4f 	bl	8001c2c <lcd1602_Send_init_Data>
	/*======Выбираем 2 страницу символов======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff49 	bl	8001c2c <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001d9e:	1dfb      	adds	r3, r7, #7
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff43 	bl	8001c2c <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 8001da6:	2300      	movs	r3, #0
 8001da8:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001daa:	1dfb      	adds	r3, r7, #7
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff3d 	bl	8001c2c <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 8001db2:	2310      	movs	r3, #16
 8001db4:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff37 	bl	8001c2c <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff31 	bl	8001c2c <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 8001dca:	2330      	movs	r3, #48	; 0x30
 8001dcc:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff2b 	bl	8001c2c <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff25 	bl	8001c2c <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 8001de2:	23c0      	movs	r3, #192	; 0xc0
 8001de4:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff1f 	bl	8001c2c <lcd1602_Send_init_Data>

	/*========Инициализация завершена. Включить дисплей========*/
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <lcd1602_Print_symbol>:
/*-------------------------Функция инициализации дисплея-------------------------*/

/*-------------------------Функция вывода символа на дисплей---------------------*/
/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	f023 030f 	bic.w	r3, r3, #15
 8001e08:	b25b      	sxtb	r3, r3
 8001e0a:	f043 0309 	orr.w	r3, r3, #9
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8001e14:	f107 030f 	add.w	r3, r7, #15
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff4b 	bl	8001cb4 <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	f043 0309 	orr.w	r3, r3, #9
 8001e28:	b25b      	sxtb	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8001e2e:	f107 030f 	add.w	r3, r7, #15
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff3e 	bl	8001cb4 <lcd1602_Send_data>
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <lcd1602_Print_text>:

/*-------------------------Функция вывода текста на дисплей----------------------*/
/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	e009      	b.n	8001e62 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ffcd 	bl	8001df6 <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7fe f974 	bl	8000150 <strlen>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8ee      	bhi.n	8001e4e <lcd1602_Print_text+0xe>
	}
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	460a      	mov	r2, r1
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	4613      	mov	r3, r2
 8001e88:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 8001e8a:	79bb      	ldrb	r3, [r7, #6]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d901      	bls.n	8001e94 <lcd1602_SetCursor+0x1a>
		y = 3;
 8001e90:	2303      	movs	r3, #3
 8001e92:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b27      	cmp	r3, #39	; 0x27
 8001e98:	d901      	bls.n	8001e9e <lcd1602_SetCursor+0x24>
		x = 39;
 8001e9a:	2327      	movs	r3, #39	; 0x27
 8001e9c:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 8001e9e:	79bb      	ldrb	r3, [r7, #6]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <lcd1602_SetCursor+0x2e>
		adr = x;
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 8001ea8:	79bb      	ldrb	r3, [r7, #6]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	3340      	adds	r3, #64	; 0x40
 8001eb2:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d102      	bne.n	8001ec0 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	3314      	adds	r3, #20
 8001ebe:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d102      	bne.n	8001ecc <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	3354      	adds	r3, #84	; 0x54
 8001eca:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 8001ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed4:	b25b      	sxtb	r3, r3
 8001ed6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eda:	b25b      	sxtb	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8001ee0:	f107 030e 	add.w	r3, r7, #14
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fee5 	bl	8001cb4 <lcd1602_Send_data>

	command = (adr << 4);
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8001ef2:	f107 030e 	add.w	r3, r7, #14
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fedc 	bl	8001cb4 <lcd1602_Send_data>

}
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <lcd1602_Clean>:
}
/*---------------------Функция создания своего символа-------------------------- */

/*-------------------------Функция очистки дисплея-------------------------------*/

void lcd1602_Clean(void) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
/// Аппаратная функция очистки дисплея.
/// Удаляет весь текст, возвращает курсор в начальное положение.
	uint8_t tx_buffer = 0x00;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001f0e:	1dfb      	adds	r3, r7, #7
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fe8b 	bl	8001c2c <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 8001f16:	2310      	movs	r3, #16
 8001f18:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001f1a:	1dfb      	adds	r3, r7, #7
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fe85 	bl	8001c2c <lcd1602_Send_init_Data>

}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f2c:	b598      	push	{r3, r4, r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f30:	f000 fd16 	bl	8002960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f34:	f000 f8d4 	bl	80020e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f38:	f7ff fd82 	bl	8001a40 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f3c:	f7ff fdf8 	bl	8001b30 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001f40:	f000 fa32 	bl	80023a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f44:	f000 fa86 	bl	8002454 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f48:	f000 fb10 	bl	800256c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f4c:	f000 fb68 	bl	8002620 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001f50:	4b52      	ldr	r3, [pc, #328]	; (800209c <main+0x170>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0201 	mvn.w	r2, #1
 8001f58:	611a      	str	r2, [r3, #16]
  	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001f5a:	213c      	movs	r1, #60	; 0x3c
 8001f5c:	484f      	ldr	r0, [pc, #316]	; (800209c <main+0x170>)
 8001f5e:	f003 f85d 	bl	800501c <HAL_TIM_Encoder_Start_IT>

  	HAL_TIM_Base_Start_IT(&htim2);
 8001f62:	484f      	ldr	r0, [pc, #316]	; (80020a0 <main+0x174>)
 8001f64:	f002 fe74 	bl	8004c50 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001f68:	2104      	movs	r1, #4
 8001f6a:	484d      	ldr	r0, [pc, #308]	; (80020a0 <main+0x174>)
 8001f6c:	f002 ff12 	bl	8004d94 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001f70:	2108      	movs	r1, #8
 8001f72:	484b      	ldr	r0, [pc, #300]	; (80020a0 <main+0x174>)
 8001f74:	f002 ff0e 	bl	8004d94 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001f78:	210c      	movs	r1, #12
 8001f7a:	4849      	ldr	r0, [pc, #292]	; (80020a0 <main+0x174>)
 8001f7c:	f002 ff0a 	bl	8004d94 <HAL_TIM_PWM_Start>

  	HAL_TIM_Base_Start_IT(&htim3);
 8001f80:	4848      	ldr	r0, [pc, #288]	; (80020a4 <main+0x178>)
 8001f82:	f002 fe65 	bl	8004c50 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001f86:	2100      	movs	r1, #0
 8001f88:	4846      	ldr	r0, [pc, #280]	; (80020a4 <main+0x178>)
 8001f8a:	f002 ff03 	bl	8004d94 <HAL_TIM_PWM_Start>

  	HAL_TIM_Base_Start_IT(&htim4);
 8001f8e:	4846      	ldr	r0, [pc, #280]	; (80020a8 <main+0x17c>)
 8001f90:	f002 fe5e 	bl	8004c50 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001f94:	2100      	movs	r1, #0
 8001f96:	4844      	ldr	r0, [pc, #272]	; (80020a8 <main+0x17c>)
 8001f98:	f002 fefc 	bl	8004d94 <HAL_TIM_PWM_Start>

  	lcd1602_Init();
 8001f9c:	f7ff fec8 	bl	8001d30 <lcd1602_Init>

	lcd1602_SetCursor(0, 0);
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff ff69 	bl	8001e7a <lcd1602_SetCursor>
	sprintf(lcd1602_tx_buffer, "     Check      ");
 8001fa8:	4940      	ldr	r1, [pc, #256]	; (80020ac <main+0x180>)
 8001faa:	4841      	ldr	r0, [pc, #260]	; (80020b0 <main+0x184>)
 8001fac:	f003 fee8 	bl	8005d80 <siprintf>
	lcd1602_Print_text(lcd1602_tx_buffer);
 8001fb0:	483f      	ldr	r0, [pc, #252]	; (80020b0 <main+0x184>)
 8001fb2:	f7ff ff45 	bl	8001e40 <lcd1602_Print_text>
	lcd1602_SetCursor(0, 1);
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f7ff ff5e 	bl	8001e7a <lcd1602_SetCursor>
	sprintf(lcd1602_tx_buffer, "   Temp sensor  ");
 8001fbe:	493d      	ldr	r1, [pc, #244]	; (80020b4 <main+0x188>)
 8001fc0:	483b      	ldr	r0, [pc, #236]	; (80020b0 <main+0x184>)
 8001fc2:	f003 fedd 	bl	8005d80 <siprintf>
	lcd1602_Print_text(lcd1602_tx_buffer);
 8001fc6:	483a      	ldr	r0, [pc, #232]	; (80020b0 <main+0x184>)
 8001fc8:	f7ff ff3a 	bl	8001e40 <lcd1602_Print_text>

	bmp280_init_default_params(&bmp280.params);
 8001fcc:	483a      	ldr	r0, [pc, #232]	; (80020b8 <main+0x18c>)
 8001fce:	f7fe ff0d 	bl	8000dec <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001fd2:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <main+0x190>)
 8001fd4:	2276      	movs	r2, #118	; 0x76
 8001fd6:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <main+0x190>)
 8001fda:	4a39      	ldr	r2, [pc, #228]	; (80020c0 <main+0x194>)
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28

	while (!(bmp280_init(&bmp280, &bmp280.params)))
 8001fde:	e003      	b.n	8001fe8 <main+0xbc>
	{
	 HAL_Delay(1000);
 8001fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe4:	f000 fd1e 	bl	8002a24 <HAL_Delay>
	while (!(bmp280_init(&bmp280, &bmp280.params)))
 8001fe8:	4933      	ldr	r1, [pc, #204]	; (80020b8 <main+0x18c>)
 8001fea:	4834      	ldr	r0, [pc, #208]	; (80020bc <main+0x190>)
 8001fec:	f7ff f877 	bl	80010de <bmp280_init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f083 0301 	eor.w	r3, r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f1      	bne.n	8001fe0 <main+0xb4>
	}
	//CHECK_SYSTEM();
	lcd1602_Clean();
 8001ffc:	f7ff ff82 	bl	8001f04 <lcd1602_Clean>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  bmp280_read_float(&bmp280, &temperature, &pressure, NULL);
 8002000:	2300      	movs	r3, #0
 8002002:	4a30      	ldr	r2, [pc, #192]	; (80020c4 <main+0x198>)
 8002004:	4930      	ldr	r1, [pc, #192]	; (80020c8 <main+0x19c>)
 8002006:	482d      	ldr	r0, [pc, #180]	; (80020bc <main+0x190>)
 8002008:	f7ff fccc 	bl	80019a4 <bmp280_read_float>

	  		lcd1602_SetCursor(0, 0);
 800200c:	2100      	movs	r1, #0
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff ff33 	bl	8001e7a <lcd1602_SetCursor>
	  		sprintf(lcd1602_tx_buffer, "Temperature: %d ",
	  				(uint8_t) temperature);
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <main+0x19c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fd0b 	bl	8000a34 <__aeabi_f2uiz>
 800201e:	4603      	mov	r3, r0
 8002020:	b2db      	uxtb	r3, r3
	  		sprintf(lcd1602_tx_buffer, "Temperature: %d ",
 8002022:	461a      	mov	r2, r3
 8002024:	4929      	ldr	r1, [pc, #164]	; (80020cc <main+0x1a0>)
 8002026:	4822      	ldr	r0, [pc, #136]	; (80020b0 <main+0x184>)
 8002028:	f003 feaa 	bl	8005d80 <siprintf>
	  		lcd1602_Print_text(lcd1602_tx_buffer);
 800202c:	4820      	ldr	r0, [pc, #128]	; (80020b0 <main+0x184>)
 800202e:	f7ff ff07 	bl	8001e40 <lcd1602_Print_text>

	  		lcd1602_SetCursor(0, 1);
 8002032:	2101      	movs	r1, #1
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff ff20 	bl	8001e7a <lcd1602_SetCursor>
	  		sprintf(lcd1602_tx_buffer, "Time: %dH. %dm. ",
	  				((uint8_t) (Count_Timer / 60) / 60),
 800203a:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <main+0x1a4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4925      	ldr	r1, [pc, #148]	; (80020d4 <main+0x1a8>)
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fc5b 	bl	80008fc <__aeabi_fdiv>
 8002046:	4603      	mov	r3, r0
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fcf3 	bl	8000a34 <__aeabi_f2uiz>
 800204e:	4603      	mov	r3, r0
 8002050:	b2db      	uxtb	r3, r3
	  		sprintf(lcd1602_tx_buffer, "Time: %dH. %dm. ",
 8002052:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <main+0x1ac>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	b2db      	uxtb	r3, r3
 800205c:	461c      	mov	r4, r3
	  				((uint8_t) (Count_Timer / 60) % 60));
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <main+0x1a4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	491c      	ldr	r1, [pc, #112]	; (80020d4 <main+0x1a8>)
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fc49 	bl	80008fc <__aeabi_fdiv>
 800206a:	4603      	mov	r3, r0
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fce1 	bl	8000a34 <__aeabi_f2uiz>
 8002072:	4603      	mov	r3, r0
 8002074:	b2da      	uxtb	r2, r3
	  		sprintf(lcd1602_tx_buffer, "Time: %dH. %dm. ",
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <main+0x1ac>)
 8002078:	fba3 1302 	umull	r1, r3, r3, r2
 800207c:	0959      	lsrs	r1, r3, #5
 800207e:	460b      	mov	r3, r1
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	1a5b      	subs	r3, r3, r1
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	4622      	mov	r2, r4
 800208c:	4913      	ldr	r1, [pc, #76]	; (80020dc <main+0x1b0>)
 800208e:	4808      	ldr	r0, [pc, #32]	; (80020b0 <main+0x184>)
 8002090:	f003 fe76 	bl	8005d80 <siprintf>
	  		lcd1602_Print_text(lcd1602_tx_buffer);
 8002094:	4806      	ldr	r0, [pc, #24]	; (80020b0 <main+0x184>)
 8002096:	f7ff fed3 	bl	8001e40 <lcd1602_Print_text>
	  bmp280_read_float(&bmp280, &temperature, &pressure, NULL);
 800209a:	e7b1      	b.n	8002000 <main+0xd4>
 800209c:	2000015c 	.word	0x2000015c
 80020a0:	200001a4 	.word	0x200001a4
 80020a4:	200001ec 	.word	0x200001ec
 80020a8:	20000234 	.word	0x20000234
 80020ac:	080067ec 	.word	0x080067ec
 80020b0:	200000e8 	.word	0x200000e8
 80020b4:	08006800 	.word	0x08006800
 80020b8:	20000144 	.word	0x20000144
 80020bc:	20000118 	.word	0x20000118
 80020c0:	20000094 	.word	0x20000094
 80020c4:	2000014c 	.word	0x2000014c
 80020c8:	20000150 	.word	0x20000150
 80020cc:	0800679c 	.word	0x0800679c
 80020d0:	20000114 	.word	0x20000114
 80020d4:	42700000 	.word	0x42700000
 80020d8:	88888889 	.word	0x88888889
 80020dc:	080067b0 	.word	0x080067b0

080020e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b090      	sub	sp, #64	; 0x40
 80020e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e6:	f107 0318 	add.w	r3, r7, #24
 80020ea:	2228      	movs	r2, #40	; 0x28
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 fe3e 	bl	8005d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002102:	2301      	movs	r3, #1
 8002104:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800210a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002110:	2301      	movs	r3, #1
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002114:	2302      	movs	r3, #2
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002118:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800211c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800211e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002124:	f107 0318 	add.w	r3, r7, #24
 8002128:	4618      	mov	r0, r3
 800212a:	f002 f945 	bl	80043b8 <HAL_RCC_OscConfig>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002134:	f000 f819 	bl	800216a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002138:	230f      	movs	r3, #15
 800213a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800213c:	2302      	movs	r3, #2
 800213e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002148:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	2102      	movs	r1, #2
 8002152:	4618      	mov	r0, r3
 8002154:	f002 fbb2 	bl	80048bc <HAL_RCC_ClockConfig>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800215e:	f000 f804 	bl	800216a <Error_Handler>
  }
}
 8002162:	bf00      	nop
 8002164:	3740      	adds	r7, #64	; 0x40
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800216e:	b672      	cpsid	i
}
 8002170:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002172:	e7fe      	b.n	8002172 <Error_Handler+0x8>

08002174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_MspInit+0x5c>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_MspInit+0x5c>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6193      	str	r3, [r2, #24]
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_MspInit+0x5c>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_MspInit+0x5c>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <HAL_MspInit+0x5c>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	61d3      	str	r3, [r2, #28]
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_MspInit+0x5c>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_MspInit+0x60>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_MspInit+0x60>)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010000 	.word	0x40010000

080021d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <NMI_Handler+0x4>

080021de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <HardFault_Handler+0x4>

080021e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <MemManage_Handler+0x4>

080021ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr

0800221a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800221e:	f000 fbe5 	bl	80029ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	ButtonDoor_State = !ButtonDoor_State;
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <EXTI9_5_IRQHandler+0x24>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf0c      	ite	eq
 8002236:	2301      	moveq	r3, #1
 8002238:	2300      	movne	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	4b03      	ldr	r3, [pc, #12]	; (800224c <EXTI9_5_IRQHandler+0x24>)
 8002240:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOOR_Pin);
 8002242:	2080      	movs	r0, #128	; 0x80
 8002244:	f000 febc 	bl	8002fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000110 	.word	0x20000110

08002250 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <TIM1_UP_IRQHandler+0x10>)
 8002256:	f002 ff8f 	bl	8005178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000015c 	.word	0x2000015c
 8002264:	00000000 	.word	0x00000000

08002268 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	Count_Timer = Count_Timer - 0.004;
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <TIM2_IRQHandler+0x70>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f8d9 	bl	8000428 <__aeabi_f2d>
 8002276:	a316      	add	r3, pc, #88	; (adr r3, 80022d0 <TIM2_IRQHandler+0x68>)
 8002278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227c:	f7fd ff74 	bl	8000168 <__aeabi_dsub>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f7fe f926 	bl	80004d8 <__aeabi_d2f>
 800228c:	4603      	mov	r3, r0
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <TIM2_IRQHandler+0x70>)
 8002290:	6013      	str	r3, [r2, #0]
	Count_CheckTimer = Count_CheckTimer - 0.004;
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <TIM2_IRQHandler+0x74>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f8c6 	bl	8000428 <__aeabi_f2d>
 800229c:	a30c      	add	r3, pc, #48	; (adr r3, 80022d0 <TIM2_IRQHandler+0x68>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	f7fd ff61 	bl	8000168 <__aeabi_dsub>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe f913 	bl	80004d8 <__aeabi_d2f>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4a09      	ldr	r2, [pc, #36]	; (80022dc <TIM2_IRQHandler+0x74>)
 80022b6:	6013      	str	r3, [r2, #0]

	encValue = TIM1->CNT;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <TIM2_IRQHandler+0x78>)
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <TIM2_IRQHandler+0x7c>)
 80022c0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022c2:	4809      	ldr	r0, [pc, #36]	; (80022e8 <TIM2_IRQHandler+0x80>)
 80022c4:	f002 ff58 	bl	8005178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	f3af 8000 	nop.w
 80022d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80022d4:	3f70624d 	.word	0x3f70624d
 80022d8:	20000114 	.word	0x20000114
 80022dc:	20000004 	.word	0x20000004
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	20000154 	.word	0x20000154
 80022e8:	200001a4 	.word	0x200001a4

080022ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <TIM3_IRQHandler+0x10>)
 80022f2:	f002 ff41 	bl	8005178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200001ec 	.word	0x200001ec

08002300 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <TIM4_IRQHandler+0x10>)
 8002306:	f002 ff37 	bl	8005178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000234 	.word	0x20000234

08002314 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	ButtonEncoder_State = 1;
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <EXTI15_10_IRQHandler+0x18>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_ENCODER_Pin);
 800231e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002322:	f000 fe4d 	bl	8002fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000111 	.word	0x20000111

08002330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002338:	4a14      	ldr	r2, [pc, #80]	; (800238c <_sbrk+0x5c>)
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <_sbrk+0x60>)
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <_sbrk+0x64>)
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <_sbrk+0x68>)
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	429a      	cmp	r2, r3
 800235e:	d207      	bcs.n	8002370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002360:	f003 fcdc 	bl	8005d1c <__errno>
 8002364:	4603      	mov	r3, r0
 8002366:	220c      	movs	r2, #12
 8002368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	e009      	b.n	8002384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <_sbrk+0x64>)
 8002380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20005000 	.word	0x20005000
 8002390:	00000400 	.word	0x00000400
 8002394:	20000158 	.word	0x20000158
 8002398:	20000290 	.word	0x20000290

0800239c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	; 0x30
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	2224      	movs	r2, #36	; 0x24
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fcda 	bl	8005d70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023c4:	4b21      	ldr	r3, [pc, #132]	; (800244c <MX_TIM1_Init+0xa4>)
 80023c6:	4a22      	ldr	r2, [pc, #136]	; (8002450 <MX_TIM1_Init+0xa8>)
 80023c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <MX_TIM1_Init+0xa4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d0:	4b1e      	ldr	r3, [pc, #120]	; (800244c <MX_TIM1_Init+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 21-1;
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <MX_TIM1_Init+0xa4>)
 80023d8:	2214      	movs	r2, #20
 80023da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <MX_TIM1_Init+0xa4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <MX_TIM1_Init+0xa4>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <MX_TIM1_Init+0xa4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023f6:	2301      	movs	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002406:	2301      	movs	r3, #1
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800240a:	2300      	movs	r3, #0
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	4619      	mov	r1, r3
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <MX_TIM1_Init+0xa4>)
 800241a:	f002 fd5d 	bl	8004ed8 <HAL_TIM_Encoder_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002424:	f7ff fea1 	bl	800216a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	4619      	mov	r1, r3
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <MX_TIM1_Init+0xa4>)
 8002436:	f003 fc01 	bl	8005c3c <HAL_TIMEx_MasterConfigSynchronization>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002440:	f7ff fe93 	bl	800216a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002444:	bf00      	nop
 8002446:	3730      	adds	r7, #48	; 0x30
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	2000015c 	.word	0x2000015c
 8002450:	40012c00 	.word	0x40012c00

08002454 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08e      	sub	sp, #56	; 0x38
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002468:	f107 0320 	add.w	r3, r7, #32
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
 8002480:	615a      	str	r2, [r3, #20]
 8002482:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002484:	4b38      	ldr	r3, [pc, #224]	; (8002568 <MX_TIM2_Init+0x114>)
 8002486:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800248a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1250-1;
 800248c:	4b36      	ldr	r3, [pc, #216]	; (8002568 <MX_TIM2_Init+0x114>)
 800248e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002492:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002494:	4b34      	ldr	r3, [pc, #208]	; (8002568 <MX_TIM2_Init+0x114>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 225-1;
 800249a:	4b33      	ldr	r3, [pc, #204]	; (8002568 <MX_TIM2_Init+0x114>)
 800249c:	22e0      	movs	r2, #224	; 0xe0
 800249e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a0:	4b31      	ldr	r3, [pc, #196]	; (8002568 <MX_TIM2_Init+0x114>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a6:	4b30      	ldr	r3, [pc, #192]	; (8002568 <MX_TIM2_Init+0x114>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024ac:	482e      	ldr	r0, [pc, #184]	; (8002568 <MX_TIM2_Init+0x114>)
 80024ae:	f002 fb7f 	bl	8004bb0 <HAL_TIM_Base_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80024b8:	f7ff fe57 	bl	800216a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024c6:	4619      	mov	r1, r3
 80024c8:	4827      	ldr	r0, [pc, #156]	; (8002568 <MX_TIM2_Init+0x114>)
 80024ca:	f003 f81f 	bl	800550c <HAL_TIM_ConfigClockSource>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80024d4:	f7ff fe49 	bl	800216a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024d8:	4823      	ldr	r0, [pc, #140]	; (8002568 <MX_TIM2_Init+0x114>)
 80024da:	f002 fc0b 	bl	8004cf4 <HAL_TIM_PWM_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80024e4:	f7ff fe41 	bl	800216a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024f0:	f107 0320 	add.w	r3, r7, #32
 80024f4:	4619      	mov	r1, r3
 80024f6:	481c      	ldr	r0, [pc, #112]	; (8002568 <MX_TIM2_Init+0x114>)
 80024f8:	f003 fba0 	bl	8005c3c <HAL_TIMEx_MasterConfigSynchronization>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002502:	f7ff fe32 	bl	800216a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002506:	2360      	movs	r3, #96	; 0x60
 8002508:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	2204      	movs	r2, #4
 800251a:	4619      	mov	r1, r3
 800251c:	4812      	ldr	r0, [pc, #72]	; (8002568 <MX_TIM2_Init+0x114>)
 800251e:	f002 ff33 	bl	8005388 <HAL_TIM_PWM_ConfigChannel>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002528:	f7ff fe1f 	bl	800216a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2208      	movs	r2, #8
 8002530:	4619      	mov	r1, r3
 8002532:	480d      	ldr	r0, [pc, #52]	; (8002568 <MX_TIM2_Init+0x114>)
 8002534:	f002 ff28 	bl	8005388 <HAL_TIM_PWM_ConfigChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800253e:	f7ff fe14 	bl	800216a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	220c      	movs	r2, #12
 8002546:	4619      	mov	r1, r3
 8002548:	4807      	ldr	r0, [pc, #28]	; (8002568 <MX_TIM2_Init+0x114>)
 800254a:	f002 ff1d 	bl	8005388 <HAL_TIM_PWM_ConfigChannel>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002554:	f7ff fe09 	bl	800216a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002558:	4803      	ldr	r0, [pc, #12]	; (8002568 <MX_TIM2_Init+0x114>)
 800255a:	f000 f969 	bl	8002830 <HAL_TIM_MspPostInit>

}
 800255e:	bf00      	nop
 8002560:	3738      	adds	r7, #56	; 0x38
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200001a4 	.word	0x200001a4

0800256c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002572:	f107 0320 	add.w	r3, r7, #32
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	611a      	str	r2, [r3, #16]
 800258a:	615a      	str	r2, [r3, #20]
 800258c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <MX_TIM3_Init+0xac>)
 8002590:	4a22      	ldr	r2, [pc, #136]	; (800261c <MX_TIM3_Init+0xb0>)
 8002592:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 144;
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <MX_TIM3_Init+0xac>)
 8002596:	2290      	movs	r2, #144	; 0x90
 8002598:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <MX_TIM3_Init+0xac>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25000;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <MX_TIM3_Init+0xac>)
 80025a2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80025a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <MX_TIM3_Init+0xac>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <MX_TIM3_Init+0xac>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025b4:	4818      	ldr	r0, [pc, #96]	; (8002618 <MX_TIM3_Init+0xac>)
 80025b6:	f002 fb9d 	bl	8004cf4 <HAL_TIM_PWM_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80025c0:	f7ff fdd3 	bl	800216a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025cc:	f107 0320 	add.w	r3, r7, #32
 80025d0:	4619      	mov	r1, r3
 80025d2:	4811      	ldr	r0, [pc, #68]	; (8002618 <MX_TIM3_Init+0xac>)
 80025d4:	f003 fb32 	bl	8005c3c <HAL_TIMEx_MasterConfigSynchronization>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80025de:	f7ff fdc4 	bl	800216a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e2:	2360      	movs	r3, #96	; 0x60
 80025e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2200      	movs	r2, #0
 80025f6:	4619      	mov	r1, r3
 80025f8:	4807      	ldr	r0, [pc, #28]	; (8002618 <MX_TIM3_Init+0xac>)
 80025fa:	f002 fec5 	bl	8005388 <HAL_TIM_PWM_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002604:	f7ff fdb1 	bl	800216a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002608:	4803      	ldr	r0, [pc, #12]	; (8002618 <MX_TIM3_Init+0xac>)
 800260a:	f000 f911 	bl	8002830 <HAL_TIM_MspPostInit>

}
 800260e:	bf00      	nop
 8002610:	3728      	adds	r7, #40	; 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200001ec 	.word	0x200001ec
 800261c:	40000400 	.word	0x40000400

08002620 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002626:	f107 0320 	add.w	r3, r7, #32
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	611a      	str	r2, [r3, #16]
 800263e:	615a      	str	r2, [r3, #20]
 8002640:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002642:	4b22      	ldr	r3, [pc, #136]	; (80026cc <MX_TIM4_Init+0xac>)
 8002644:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <MX_TIM4_Init+0xb0>)
 8002646:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <MX_TIM4_Init+0xac>)
 800264a:	2200      	movs	r2, #0
 800264c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264e:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <MX_TIM4_Init+0xac>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <MX_TIM4_Init+0xac>)
 8002656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800265a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <MX_TIM4_Init+0xac>)
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002662:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <MX_TIM4_Init+0xac>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002668:	4818      	ldr	r0, [pc, #96]	; (80026cc <MX_TIM4_Init+0xac>)
 800266a:	f002 fb43 	bl	8004cf4 <HAL_TIM_PWM_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002674:	f7ff fd79 	bl	800216a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002678:	2300      	movs	r3, #0
 800267a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002680:	f107 0320 	add.w	r3, r7, #32
 8002684:	4619      	mov	r1, r3
 8002686:	4811      	ldr	r0, [pc, #68]	; (80026cc <MX_TIM4_Init+0xac>)
 8002688:	f003 fad8 	bl	8005c3c <HAL_TIMEx_MasterConfigSynchronization>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002692:	f7ff fd6a 	bl	800216a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002696:	2360      	movs	r3, #96	; 0x60
 8002698:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2200      	movs	r2, #0
 80026aa:	4619      	mov	r1, r3
 80026ac:	4807      	ldr	r0, [pc, #28]	; (80026cc <MX_TIM4_Init+0xac>)
 80026ae:	f002 fe6b 	bl	8005388 <HAL_TIM_PWM_ConfigChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80026b8:	f7ff fd57 	bl	800216a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80026bc:	4803      	ldr	r0, [pc, #12]	; (80026cc <MX_TIM4_Init+0xac>)
 80026be:	f000 f8b7 	bl	8002830 <HAL_TIM_MspPostInit>

}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	; 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000234 	.word	0x20000234
 80026d0:	40000800 	.word	0x40000800

080026d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <HAL_TIM_Encoder_MspInit+0x84>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d12c      	bne.n	800274e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_TIM_Encoder_MspInit+0x88>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4a18      	ldr	r2, [pc, #96]	; (800275c <HAL_TIM_Encoder_MspInit+0x88>)
 80026fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026fe:	6193      	str	r3, [r2, #24]
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_TIM_Encoder_MspInit+0x88>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <HAL_TIM_Encoder_MspInit+0x88>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4a12      	ldr	r2, [pc, #72]	; (800275c <HAL_TIM_Encoder_MspInit+0x88>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6193      	str	r3, [r2, #24]
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_TIM_Encoder_MspInit+0x88>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002724:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002728:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002732:	f107 0310 	add.w	r3, r7, #16
 8002736:	4619      	mov	r1, r3
 8002738:	4809      	ldr	r0, [pc, #36]	; (8002760 <HAL_TIM_Encoder_MspInit+0x8c>)
 800273a:	f000 faa5 	bl	8002c88 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	2019      	movs	r0, #25
 8002744:	f000 fa69 	bl	8002c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002748:	2019      	movs	r0, #25
 800274a:	f000 fa82 	bl	8002c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800274e:	bf00      	nop
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40012c00 	.word	0x40012c00
 800275c:	40021000 	.word	0x40021000
 8002760:	40010800 	.word	0x40010800

08002764 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002774:	d113      	bne.n	800279e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <HAL_TIM_Base_MspInit+0x44>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4a0b      	ldr	r2, [pc, #44]	; (80027a8 <HAL_TIM_Base_MspInit+0x44>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	61d3      	str	r3, [r2, #28]
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_TIM_Base_MspInit+0x44>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	201c      	movs	r0, #28
 8002794:	f000 fa41 	bl	8002c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002798:	201c      	movs	r0, #28
 800279a:	f000 fa5a 	bl	8002c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000

080027ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1a      	ldr	r2, [pc, #104]	; (8002824 <HAL_TIM_PWM_MspInit+0x78>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d114      	bne.n	80027e8 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <HAL_TIM_PWM_MspInit+0x7c>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_TIM_PWM_MspInit+0x7c>)
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	61d3      	str	r3, [r2, #28]
 80027ca:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_TIM_PWM_MspInit+0x7c>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	201d      	movs	r0, #29
 80027dc:	f000 fa1d 	bl	8002c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027e0:	201d      	movs	r0, #29
 80027e2:	f000 fa36 	bl	8002c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027e6:	e018      	b.n	800281a <HAL_TIM_PWM_MspInit+0x6e>
  else if(tim_pwmHandle->Instance==TIM4)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0f      	ldr	r2, [pc, #60]	; (800282c <HAL_TIM_PWM_MspInit+0x80>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d113      	bne.n	800281a <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <HAL_TIM_PWM_MspInit+0x7c>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <HAL_TIM_PWM_MspInit+0x7c>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	61d3      	str	r3, [r2, #28]
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <HAL_TIM_PWM_MspInit+0x7c>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	201e      	movs	r0, #30
 8002810:	f000 fa03 	bl	8002c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002814:	201e      	movs	r0, #30
 8002816:	f000 fa1c 	bl	8002c52 <HAL_NVIC_EnableIRQ>
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40000400 	.word	0x40000400
 8002828:	40021000 	.word	0x40021000
 800282c:	40000800 	.word	0x40000800

08002830 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0318 	add.w	r3, r7, #24
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284e:	d118      	bne.n	8002882 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_TIM_MspPostInit+0xd0>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4a2a      	ldr	r2, [pc, #168]	; (8002900 <HAL_TIM_MspPostInit+0xd0>)
 8002856:	f043 0304 	orr.w	r3, r3, #4
 800285a:	6193      	str	r3, [r2, #24]
 800285c:	4b28      	ldr	r3, [pc, #160]	; (8002900 <HAL_TIM_MspPostInit+0xd0>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 8002868:	230e      	movs	r3, #14
 800286a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2302      	movs	r3, #2
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002874:	f107 0318 	add.w	r3, r7, #24
 8002878:	4619      	mov	r1, r3
 800287a:	4822      	ldr	r0, [pc, #136]	; (8002904 <HAL_TIM_MspPostInit+0xd4>)
 800287c:	f000 fa04 	bl	8002c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002880:	e03a      	b.n	80028f8 <HAL_TIM_MspPostInit+0xc8>
  else if(timHandle->Instance==TIM3)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a20      	ldr	r2, [pc, #128]	; (8002908 <HAL_TIM_MspPostInit+0xd8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d118      	bne.n	80028be <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288c:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <HAL_TIM_MspPostInit+0xd0>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <HAL_TIM_MspPostInit+0xd0>)
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	6193      	str	r3, [r2, #24]
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_TIM_MspPostInit+0xd0>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOSFET_Pin;
 80028a4:	2340      	movs	r3, #64	; 0x40
 80028a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2302      	movs	r3, #2
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOSFET_GPIO_Port, &GPIO_InitStruct);
 80028b0:	f107 0318 	add.w	r3, r7, #24
 80028b4:	4619      	mov	r1, r3
 80028b6:	4813      	ldr	r0, [pc, #76]	; (8002904 <HAL_TIM_MspPostInit+0xd4>)
 80028b8:	f000 f9e6 	bl	8002c88 <HAL_GPIO_Init>
}
 80028bc:	e01c      	b.n	80028f8 <HAL_TIM_MspPostInit+0xc8>
  else if(timHandle->Instance==TIM4)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <HAL_TIM_MspPostInit+0xdc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d117      	bne.n	80028f8 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c8:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <HAL_TIM_MspPostInit+0xd0>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <HAL_TIM_MspPostInit+0xd0>)
 80028ce:	f043 0308 	orr.w	r3, r3, #8
 80028d2:	6193      	str	r3, [r2, #24]
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_TIM_MspPostInit+0xd0>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80028e0:	2340      	movs	r3, #64	; 0x40
 80028e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2302      	movs	r3, #2
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80028ec:	f107 0318 	add.w	r3, r7, #24
 80028f0:	4619      	mov	r1, r3
 80028f2:	4807      	ldr	r0, [pc, #28]	; (8002910 <HAL_TIM_MspPostInit+0xe0>)
 80028f4:	f000 f9c8 	bl	8002c88 <HAL_GPIO_Init>
}
 80028f8:	bf00      	nop
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	40010800 	.word	0x40010800
 8002908:	40000400 	.word	0x40000400
 800290c:	40000800 	.word	0x40000800
 8002910:	40010c00 	.word	0x40010c00

08002914 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 8002914:	f7ff fd42 	bl	800239c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002918:	480b      	ldr	r0, [pc, #44]	; (8002948 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800291a:	490c      	ldr	r1, [pc, #48]	; (800294c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800291c:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <LoopFillZerobss+0x16>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002920:	e002      	b.n	8002928 <LoopCopyDataInit>

08002922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002926:	3304      	adds	r3, #4

08002928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800292c:	d3f9      	bcc.n	8002922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002930:	4c09      	ldr	r4, [pc, #36]	; (8002958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002934:	e001      	b.n	800293a <LoopFillZerobss>

08002936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002938:	3204      	adds	r2, #4

0800293a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800293c:	d3fb      	bcc.n	8002936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800293e:	f003 f9f3 	bl	8005d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002942:	f7ff faf3 	bl	8001f2c <main>
  bx lr
 8002946:	4770      	bx	lr
  ldr r0, =_sdata
 8002948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800294c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002950:	08006884 	.word	0x08006884
  ldr r2, =_sbss
 8002954:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002958:	20000290 	.word	0x20000290

0800295c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800295c:	e7fe      	b.n	800295c <ADC1_2_IRQHandler>
	...

08002960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_Init+0x28>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a07      	ldr	r2, [pc, #28]	; (8002988 <HAL_Init+0x28>)
 800296a:	f043 0310 	orr.w	r3, r3, #16
 800296e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002970:	2003      	movs	r0, #3
 8002972:	f000 f947 	bl	8002c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002976:	200f      	movs	r0, #15
 8002978:	f000 f808 	bl	800298c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800297c:	f7ff fbfa 	bl	8002174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40022000 	.word	0x40022000

0800298c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_InitTick+0x54>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_InitTick+0x58>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4619      	mov	r1, r3
 800299e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f95f 	bl	8002c6e <HAL_SYSTICK_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e00e      	b.n	80029d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b0f      	cmp	r3, #15
 80029be:	d80a      	bhi.n	80029d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c0:	2200      	movs	r2, #0
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295
 80029c8:	f000 f927 	bl	8002c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029cc:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <HAL_InitTick+0x5c>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e000      	b.n	80029d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000008 	.word	0x20000008
 80029e4:	20000010 	.word	0x20000010
 80029e8:	2000000c 	.word	0x2000000c

080029ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_IncTick+0x1c>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_IncTick+0x20>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	4a03      	ldr	r2, [pc, #12]	; (8002a0c <HAL_IncTick+0x20>)
 80029fe:	6013      	str	r3, [r2, #0]
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	20000010 	.word	0x20000010
 8002a0c:	2000027c 	.word	0x2000027c

08002a10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return uwTick;
 8002a14:	4b02      	ldr	r3, [pc, #8]	; (8002a20 <HAL_GetTick+0x10>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	2000027c 	.word	0x2000027c

08002a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a2c:	f7ff fff0 	bl	8002a10 <HAL_GetTick>
 8002a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3c:	d005      	beq.n	8002a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <HAL_Delay+0x44>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4413      	add	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a4a:	bf00      	nop
 8002a4c:	f7ff ffe0 	bl	8002a10 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d8f7      	bhi.n	8002a4c <HAL_Delay+0x28>
  {
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000010 	.word	0x20000010

08002a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9e:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	60d3      	str	r3, [r2, #12]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <__NVIC_GetPriorityGrouping+0x18>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 0307 	and.w	r3, r3, #7
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	db0b      	blt.n	8002afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	f003 021f 	and.w	r2, r3, #31
 8002ae8:	4906      	ldr	r1, [pc, #24]	; (8002b04 <__NVIC_EnableIRQ+0x34>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	2001      	movs	r0, #1
 8002af2:	fa00 f202 	lsl.w	r2, r0, r2
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	e000e100 	.word	0xe000e100

08002b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	db0a      	blt.n	8002b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	490c      	ldr	r1, [pc, #48]	; (8002b54 <__NVIC_SetPriority+0x4c>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	0112      	lsls	r2, r2, #4
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b30:	e00a      	b.n	8002b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	4908      	ldr	r1, [pc, #32]	; (8002b58 <__NVIC_SetPriority+0x50>)
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	3b04      	subs	r3, #4
 8002b40:	0112      	lsls	r2, r2, #4
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	440b      	add	r3, r1
 8002b46:	761a      	strb	r2, [r3, #24]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000e100 	.word	0xe000e100
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	; 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f1c3 0307 	rsb	r3, r3, #7
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	bf28      	it	cs
 8002b7a:	2304      	movcs	r3, #4
 8002b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3304      	adds	r3, #4
 8002b82:	2b06      	cmp	r3, #6
 8002b84:	d902      	bls.n	8002b8c <NVIC_EncodePriority+0x30>
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3b03      	subs	r3, #3
 8002b8a:	e000      	b.n	8002b8e <NVIC_EncodePriority+0x32>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b90:	f04f 32ff 	mov.w	r2, #4294967295
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	43d9      	mvns	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	4313      	orrs	r3, r2
         );
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3724      	adds	r7, #36	; 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd0:	d301      	bcc.n	8002bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00f      	b.n	8002bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <SysTick_Config+0x40>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bde:	210f      	movs	r1, #15
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	f7ff ff90 	bl	8002b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <SysTick_Config+0x40>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bee:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <SysTick_Config+0x40>)
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	e000e010 	.word	0xe000e010

08002c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff2d 	bl	8002a6c <__NVIC_SetPriorityGrouping>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b086      	sub	sp, #24
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c2c:	f7ff ff42 	bl	8002ab4 <__NVIC_GetPriorityGrouping>
 8002c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	6978      	ldr	r0, [r7, #20]
 8002c38:	f7ff ff90 	bl	8002b5c <NVIC_EncodePriority>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c42:	4611      	mov	r1, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff5f 	bl	8002b08 <__NVIC_SetPriority>
}
 8002c4a:	bf00      	nop
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff35 	bl	8002ad0 <__NVIC_EnableIRQ>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff ffa2 	bl	8002bc0 <SysTick_Config>
 8002c7c:	4603      	mov	r3, r0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b08b      	sub	sp, #44	; 0x2c
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c96:	2300      	movs	r3, #0
 8002c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c9a:	e169      	b.n	8002f70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	f040 8158 	bne.w	8002f6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a9a      	ldr	r2, [pc, #616]	; (8002f28 <HAL_GPIO_Init+0x2a0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d05e      	beq.n	8002d82 <HAL_GPIO_Init+0xfa>
 8002cc4:	4a98      	ldr	r2, [pc, #608]	; (8002f28 <HAL_GPIO_Init+0x2a0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d875      	bhi.n	8002db6 <HAL_GPIO_Init+0x12e>
 8002cca:	4a98      	ldr	r2, [pc, #608]	; (8002f2c <HAL_GPIO_Init+0x2a4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d058      	beq.n	8002d82 <HAL_GPIO_Init+0xfa>
 8002cd0:	4a96      	ldr	r2, [pc, #600]	; (8002f2c <HAL_GPIO_Init+0x2a4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d86f      	bhi.n	8002db6 <HAL_GPIO_Init+0x12e>
 8002cd6:	4a96      	ldr	r2, [pc, #600]	; (8002f30 <HAL_GPIO_Init+0x2a8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d052      	beq.n	8002d82 <HAL_GPIO_Init+0xfa>
 8002cdc:	4a94      	ldr	r2, [pc, #592]	; (8002f30 <HAL_GPIO_Init+0x2a8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d869      	bhi.n	8002db6 <HAL_GPIO_Init+0x12e>
 8002ce2:	4a94      	ldr	r2, [pc, #592]	; (8002f34 <HAL_GPIO_Init+0x2ac>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d04c      	beq.n	8002d82 <HAL_GPIO_Init+0xfa>
 8002ce8:	4a92      	ldr	r2, [pc, #584]	; (8002f34 <HAL_GPIO_Init+0x2ac>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d863      	bhi.n	8002db6 <HAL_GPIO_Init+0x12e>
 8002cee:	4a92      	ldr	r2, [pc, #584]	; (8002f38 <HAL_GPIO_Init+0x2b0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d046      	beq.n	8002d82 <HAL_GPIO_Init+0xfa>
 8002cf4:	4a90      	ldr	r2, [pc, #576]	; (8002f38 <HAL_GPIO_Init+0x2b0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d85d      	bhi.n	8002db6 <HAL_GPIO_Init+0x12e>
 8002cfa:	2b12      	cmp	r3, #18
 8002cfc:	d82a      	bhi.n	8002d54 <HAL_GPIO_Init+0xcc>
 8002cfe:	2b12      	cmp	r3, #18
 8002d00:	d859      	bhi.n	8002db6 <HAL_GPIO_Init+0x12e>
 8002d02:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <HAL_GPIO_Init+0x80>)
 8002d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d08:	08002d83 	.word	0x08002d83
 8002d0c:	08002d5d 	.word	0x08002d5d
 8002d10:	08002d6f 	.word	0x08002d6f
 8002d14:	08002db1 	.word	0x08002db1
 8002d18:	08002db7 	.word	0x08002db7
 8002d1c:	08002db7 	.word	0x08002db7
 8002d20:	08002db7 	.word	0x08002db7
 8002d24:	08002db7 	.word	0x08002db7
 8002d28:	08002db7 	.word	0x08002db7
 8002d2c:	08002db7 	.word	0x08002db7
 8002d30:	08002db7 	.word	0x08002db7
 8002d34:	08002db7 	.word	0x08002db7
 8002d38:	08002db7 	.word	0x08002db7
 8002d3c:	08002db7 	.word	0x08002db7
 8002d40:	08002db7 	.word	0x08002db7
 8002d44:	08002db7 	.word	0x08002db7
 8002d48:	08002db7 	.word	0x08002db7
 8002d4c:	08002d65 	.word	0x08002d65
 8002d50:	08002d79 	.word	0x08002d79
 8002d54:	4a79      	ldr	r2, [pc, #484]	; (8002f3c <HAL_GPIO_Init+0x2b4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d5a:	e02c      	b.n	8002db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	623b      	str	r3, [r7, #32]
          break;
 8002d62:	e029      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	623b      	str	r3, [r7, #32]
          break;
 8002d6c:	e024      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	3308      	adds	r3, #8
 8002d74:	623b      	str	r3, [r7, #32]
          break;
 8002d76:	e01f      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	623b      	str	r3, [r7, #32]
          break;
 8002d80:	e01a      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	623b      	str	r3, [r7, #32]
          break;
 8002d8e:	e013      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d105      	bne.n	8002da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d98:	2308      	movs	r3, #8
 8002d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	611a      	str	r2, [r3, #16]
          break;
 8002da2:	e009      	b.n	8002db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002da4:	2308      	movs	r3, #8
 8002da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	615a      	str	r2, [r3, #20]
          break;
 8002dae:	e003      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002db0:	2300      	movs	r3, #0
 8002db2:	623b      	str	r3, [r7, #32]
          break;
 8002db4:	e000      	b.n	8002db8 <HAL_GPIO_Init+0x130>
          break;
 8002db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2bff      	cmp	r3, #255	; 0xff
 8002dbc:	d801      	bhi.n	8002dc2 <HAL_GPIO_Init+0x13a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	e001      	b.n	8002dc6 <HAL_GPIO_Init+0x13e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2bff      	cmp	r3, #255	; 0xff
 8002dcc:	d802      	bhi.n	8002dd4 <HAL_GPIO_Init+0x14c>
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	e002      	b.n	8002dda <HAL_GPIO_Init+0x152>
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	3b08      	subs	r3, #8
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	210f      	movs	r1, #15
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	fa01 f303 	lsl.w	r3, r1, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	401a      	ands	r2, r3
 8002dec:	6a39      	ldr	r1, [r7, #32]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	431a      	orrs	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80b1 	beq.w	8002f6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e08:	4b4d      	ldr	r3, [pc, #308]	; (8002f40 <HAL_GPIO_Init+0x2b8>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	4a4c      	ldr	r2, [pc, #304]	; (8002f40 <HAL_GPIO_Init+0x2b8>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6193      	str	r3, [r2, #24]
 8002e14:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <HAL_GPIO_Init+0x2b8>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e20:	4a48      	ldr	r2, [pc, #288]	; (8002f44 <HAL_GPIO_Init+0x2bc>)
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	3302      	adds	r3, #2
 8002e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	220f      	movs	r2, #15
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4013      	ands	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a40      	ldr	r2, [pc, #256]	; (8002f48 <HAL_GPIO_Init+0x2c0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d013      	beq.n	8002e74 <HAL_GPIO_Init+0x1ec>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a3f      	ldr	r2, [pc, #252]	; (8002f4c <HAL_GPIO_Init+0x2c4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00d      	beq.n	8002e70 <HAL_GPIO_Init+0x1e8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a3e      	ldr	r2, [pc, #248]	; (8002f50 <HAL_GPIO_Init+0x2c8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d007      	beq.n	8002e6c <HAL_GPIO_Init+0x1e4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a3d      	ldr	r2, [pc, #244]	; (8002f54 <HAL_GPIO_Init+0x2cc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d101      	bne.n	8002e68 <HAL_GPIO_Init+0x1e0>
 8002e64:	2303      	movs	r3, #3
 8002e66:	e006      	b.n	8002e76 <HAL_GPIO_Init+0x1ee>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	e004      	b.n	8002e76 <HAL_GPIO_Init+0x1ee>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e002      	b.n	8002e76 <HAL_GPIO_Init+0x1ee>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <HAL_GPIO_Init+0x1ee>
 8002e74:	2300      	movs	r3, #0
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	f002 0203 	and.w	r2, r2, #3
 8002e7c:	0092      	lsls	r2, r2, #2
 8002e7e:	4093      	lsls	r3, r2
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e86:	492f      	ldr	r1, [pc, #188]	; (8002f44 <HAL_GPIO_Init+0x2bc>)
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d006      	beq.n	8002eae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	492c      	ldr	r1, [pc, #176]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	608b      	str	r3, [r1, #8]
 8002eac:	e006      	b.n	8002ebc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eae:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	4928      	ldr	r1, [pc, #160]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d006      	beq.n	8002ed6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ec8:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	4922      	ldr	r1, [pc, #136]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60cb      	str	r3, [r1, #12]
 8002ed4:	e006      	b.n	8002ee4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	491e      	ldr	r1, [pc, #120]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d006      	beq.n	8002efe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4918      	ldr	r1, [pc, #96]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
 8002efc:	e006      	b.n	8002f0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	4914      	ldr	r1, [pc, #80]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d021      	beq.n	8002f5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	490e      	ldr	r1, [pc, #56]	; (8002f58 <HAL_GPIO_Init+0x2d0>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
 8002f24:	e021      	b.n	8002f6a <HAL_GPIO_Init+0x2e2>
 8002f26:	bf00      	nop
 8002f28:	10320000 	.word	0x10320000
 8002f2c:	10310000 	.word	0x10310000
 8002f30:	10220000 	.word	0x10220000
 8002f34:	10210000 	.word	0x10210000
 8002f38:	10120000 	.word	0x10120000
 8002f3c:	10110000 	.word	0x10110000
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40010000 	.word	0x40010000
 8002f48:	40010800 	.word	0x40010800
 8002f4c:	40010c00 	.word	0x40010c00
 8002f50:	40011000 	.word	0x40011000
 8002f54:	40011400 	.word	0x40011400
 8002f58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_GPIO_Init+0x304>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	4909      	ldr	r1, [pc, #36]	; (8002f8c <HAL_GPIO_Init+0x304>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f47f ae8e 	bne.w	8002c9c <HAL_GPIO_Init+0x14>
  }
}
 8002f80:	bf00      	nop
 8002f82:	bf00      	nop
 8002f84:	372c      	adds	r7, #44	; 0x2c
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	40010400 	.word	0x40010400

08002f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	807b      	strh	r3, [r7, #2]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fa0:	787b      	ldrb	r3, [r7, #1]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fa6:	887a      	ldrh	r2, [r7, #2]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fac:	e003      	b.n	8002fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	041a      	lsls	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	611a      	str	r2, [r3, #16]
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d006      	beq.n	8002fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fd6:	4a05      	ldr	r2, [pc, #20]	; (8002fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f806 	bl	8002ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40010400 	.word	0x40010400

08002ff0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e12b      	b.n	800326e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fe fdae 	bl	8001b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2224      	movs	r2, #36	; 0x24
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003056:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003066:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003068:	f001 fd70 	bl	8004b4c <HAL_RCC_GetPCLK1Freq>
 800306c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4a81      	ldr	r2, [pc, #516]	; (8003278 <HAL_I2C_Init+0x274>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d807      	bhi.n	8003088 <HAL_I2C_Init+0x84>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4a80      	ldr	r2, [pc, #512]	; (800327c <HAL_I2C_Init+0x278>)
 800307c:	4293      	cmp	r3, r2
 800307e:	bf94      	ite	ls
 8003080:	2301      	movls	r3, #1
 8003082:	2300      	movhi	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e006      	b.n	8003096 <HAL_I2C_Init+0x92>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a7d      	ldr	r2, [pc, #500]	; (8003280 <HAL_I2C_Init+0x27c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	bf94      	ite	ls
 8003090:	2301      	movls	r3, #1
 8003092:	2300      	movhi	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0e7      	b.n	800326e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a78      	ldr	r2, [pc, #480]	; (8003284 <HAL_I2C_Init+0x280>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	0c9b      	lsrs	r3, r3, #18
 80030a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a6a      	ldr	r2, [pc, #424]	; (8003278 <HAL_I2C_Init+0x274>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d802      	bhi.n	80030d8 <HAL_I2C_Init+0xd4>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3301      	adds	r3, #1
 80030d6:	e009      	b.n	80030ec <HAL_I2C_Init+0xe8>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	4a69      	ldr	r2, [pc, #420]	; (8003288 <HAL_I2C_Init+0x284>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	3301      	adds	r3, #1
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	495c      	ldr	r1, [pc, #368]	; (8003278 <HAL_I2C_Init+0x274>)
 8003108:	428b      	cmp	r3, r1
 800310a:	d819      	bhi.n	8003140 <HAL_I2C_Init+0x13c>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1e59      	subs	r1, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	fbb1 f3f3 	udiv	r3, r1, r3
 800311a:	1c59      	adds	r1, r3, #1
 800311c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003120:	400b      	ands	r3, r1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_I2C_Init+0x138>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1e59      	subs	r1, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fbb1 f3f3 	udiv	r3, r1, r3
 8003134:	3301      	adds	r3, #1
 8003136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313a:	e051      	b.n	80031e0 <HAL_I2C_Init+0x1dc>
 800313c:	2304      	movs	r3, #4
 800313e:	e04f      	b.n	80031e0 <HAL_I2C_Init+0x1dc>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d111      	bne.n	800316c <HAL_I2C_Init+0x168>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1e58      	subs	r0, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	440b      	add	r3, r1
 8003156:	fbb0 f3f3 	udiv	r3, r0, r3
 800315a:	3301      	adds	r3, #1
 800315c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e012      	b.n	8003192 <HAL_I2C_Init+0x18e>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1e58      	subs	r0, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	0099      	lsls	r1, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003182:	3301      	adds	r3, #1
 8003184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Init+0x196>
 8003196:	2301      	movs	r3, #1
 8003198:	e022      	b.n	80031e0 <HAL_I2C_Init+0x1dc>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10e      	bne.n	80031c0 <HAL_I2C_Init+0x1bc>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1e58      	subs	r0, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6859      	ldr	r1, [r3, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	440b      	add	r3, r1
 80031b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031be:	e00f      	b.n	80031e0 <HAL_I2C_Init+0x1dc>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1e58      	subs	r0, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	0099      	lsls	r1, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	6809      	ldr	r1, [r1, #0]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800320e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6911      	ldr	r1, [r2, #16]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68d2      	ldr	r2, [r2, #12]
 800321a:	4311      	orrs	r1, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	430b      	orrs	r3, r1
 8003222:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	000186a0 	.word	0x000186a0
 800327c:	001e847f 	.word	0x001e847f
 8003280:	003d08ff 	.word	0x003d08ff
 8003284:	431bde83 	.word	0x431bde83
 8003288:	10624dd3 	.word	0x10624dd3

0800328c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	461a      	mov	r2, r3
 8003298:	460b      	mov	r3, r1
 800329a:	817b      	strh	r3, [r7, #10]
 800329c:	4613      	mov	r3, r2
 800329e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032a0:	f7ff fbb6 	bl	8002a10 <HAL_GetTick>
 80032a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	f040 80e0 	bne.w	8003474 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	2319      	movs	r3, #25
 80032ba:	2201      	movs	r2, #1
 80032bc:	4970      	ldr	r1, [pc, #448]	; (8003480 <HAL_I2C_Master_Transmit+0x1f4>)
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fe44 	bl	8003f4c <I2C_WaitOnFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032ca:	2302      	movs	r3, #2
 80032cc:	e0d3      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_I2C_Master_Transmit+0x50>
 80032d8:	2302      	movs	r3, #2
 80032da:	e0cc      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1ea>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d007      	beq.n	8003302 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003310:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2221      	movs	r2, #33	; 0x21
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2210      	movs	r2, #16
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	893a      	ldrh	r2, [r7, #8]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4a50      	ldr	r2, [pc, #320]	; (8003484 <HAL_I2C_Master_Transmit+0x1f8>)
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003344:	8979      	ldrh	r1, [r7, #10]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	6a3a      	ldr	r2, [r7, #32]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fbfe 	bl	8003b4c <I2C_MasterRequestWrite>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e08d      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003370:	e066      	b.n	8003440 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	6a39      	ldr	r1, [r7, #32]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 ff02 	bl	8004180 <I2C_WaitOnTXEFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00d      	beq.n	800339e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b04      	cmp	r3, #4
 8003388:	d107      	bne.n	800339a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003398:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e06b      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	781a      	ldrb	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d11b      	bne.n	8003414 <HAL_I2C_Master_Transmit+0x188>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d017      	beq.n	8003414 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	6a39      	ldr	r1, [r7, #32]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fef9 	bl	8004210 <I2C_WaitOnBTFFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00d      	beq.n	8003440 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	2b04      	cmp	r3, #4
 800342a:	d107      	bne.n	800343c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e01a      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d194      	bne.n	8003372 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	00100002 	.word	0x00100002
 8003484:	ffff0000 	.word	0xffff0000

08003488 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	4608      	mov	r0, r1
 8003492:	4611      	mov	r1, r2
 8003494:	461a      	mov	r2, r3
 8003496:	4603      	mov	r3, r0
 8003498:	817b      	strh	r3, [r7, #10]
 800349a:	460b      	mov	r3, r1
 800349c:	813b      	strh	r3, [r7, #8]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034a2:	f7ff fab5 	bl	8002a10 <HAL_GetTick>
 80034a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	f040 80d9 	bne.w	8003668 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2319      	movs	r3, #25
 80034bc:	2201      	movs	r2, #1
 80034be:	496d      	ldr	r1, [pc, #436]	; (8003674 <HAL_I2C_Mem_Write+0x1ec>)
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fd43 	bl	8003f4c <I2C_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
 80034ce:	e0cc      	b.n	800366a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_I2C_Mem_Write+0x56>
 80034da:	2302      	movs	r3, #2
 80034dc:	e0c5      	b.n	800366a <HAL_I2C_Mem_Write+0x1e2>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d007      	beq.n	8003504 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003512:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2221      	movs	r2, #33	; 0x21
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2240      	movs	r2, #64	; 0x40
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a3a      	ldr	r2, [r7, #32]
 800352e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003534:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a4d      	ldr	r2, [pc, #308]	; (8003678 <HAL_I2C_Mem_Write+0x1f0>)
 8003544:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003546:	88f8      	ldrh	r0, [r7, #6]
 8003548:	893a      	ldrh	r2, [r7, #8]
 800354a:	8979      	ldrh	r1, [r7, #10]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	4603      	mov	r3, r0
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fb7a 	bl	8003c50 <I2C_RequestMemoryWrite>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d052      	beq.n	8003608 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e081      	b.n	800366a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fe08 	bl	8004180 <I2C_WaitOnTXEFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	2b04      	cmp	r3, #4
 800357c:	d107      	bne.n	800358e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e06b      	b.n	800366a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	781a      	ldrb	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d11b      	bne.n	8003608 <HAL_I2C_Mem_Write+0x180>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d017      	beq.n	8003608 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	781a      	ldrb	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1aa      	bne.n	8003566 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fdfb 	bl	8004210 <I2C_WaitOnBTFFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00d      	beq.n	800363c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	2b04      	cmp	r3, #4
 8003626:	d107      	bne.n	8003638 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003636:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e016      	b.n	800366a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	e000      	b.n	800366a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003668:	2302      	movs	r3, #2
  }
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	00100002 	.word	0x00100002
 8003678:	ffff0000 	.word	0xffff0000

0800367c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08c      	sub	sp, #48	; 0x30
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	4608      	mov	r0, r1
 8003686:	4611      	mov	r1, r2
 8003688:	461a      	mov	r2, r3
 800368a:	4603      	mov	r3, r0
 800368c:	817b      	strh	r3, [r7, #10]
 800368e:	460b      	mov	r3, r1
 8003690:	813b      	strh	r3, [r7, #8]
 8003692:	4613      	mov	r3, r2
 8003694:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800369a:	f7ff f9b9 	bl	8002a10 <HAL_GetTick>
 800369e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	f040 8244 	bne.w	8003b36 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2319      	movs	r3, #25
 80036b4:	2201      	movs	r2, #1
 80036b6:	4982      	ldr	r1, [pc, #520]	; (80038c0 <HAL_I2C_Mem_Read+0x244>)
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fc47 	bl	8003f4c <I2C_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80036c4:	2302      	movs	r3, #2
 80036c6:	e237      	b.n	8003b38 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_I2C_Mem_Read+0x5a>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e230      	b.n	8003b38 <HAL_I2C_Mem_Read+0x4bc>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d007      	beq.n	80036fc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800370a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2222      	movs	r2, #34	; 0x22
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2240      	movs	r2, #64	; 0x40
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003726:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800372c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a62      	ldr	r2, [pc, #392]	; (80038c4 <HAL_I2C_Mem_Read+0x248>)
 800373c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800373e:	88f8      	ldrh	r0, [r7, #6]
 8003740:	893a      	ldrh	r2, [r7, #8]
 8003742:	8979      	ldrh	r1, [r7, #10]
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	4603      	mov	r3, r0
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fb14 	bl	8003d7c <I2C_RequestMemoryRead>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e1ec      	b.n	8003b38 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	2b00      	cmp	r3, #0
 8003764:	d113      	bne.n	800378e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e1c0      	b.n	8003b10 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003792:	2b01      	cmp	r3, #1
 8003794:	d11e      	bne.n	80037d4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037a6:	b672      	cpsid	i
}
 80037a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037aa:	2300      	movs	r3, #0
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037d0:	b662      	cpsie	i
}
 80037d2:	e035      	b.n	8003840 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d11e      	bne.n	800381a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037ec:	b672      	cpsid	i
}
 80037ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003814:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003816:	b662      	cpsie	i
}
 8003818:	e012      	b.n	8003840 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003828:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003840:	e166      	b.n	8003b10 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003846:	2b03      	cmp	r3, #3
 8003848:	f200 811f 	bhi.w	8003a8a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	2b01      	cmp	r3, #1
 8003852:	d123      	bne.n	800389c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003856:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fd21 	bl	80042a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e167      	b.n	8003b38 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a
 800389a:	e139      	b.n	8003b10 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d152      	bne.n	800394a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	2200      	movs	r2, #0
 80038ac:	4906      	ldr	r1, [pc, #24]	; (80038c8 <HAL_I2C_Mem_Read+0x24c>)
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 fb4c 	bl	8003f4c <I2C_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e13c      	b.n	8003b38 <HAL_I2C_Mem_Read+0x4bc>
 80038be:	bf00      	nop
 80038c0:	00100002 	.word	0x00100002
 80038c4:	ffff0000 	.word	0xffff0000
 80038c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038cc:	b672      	cpsid	i
}
 80038ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003912:	b662      	cpsie	i
}
 8003914:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003948:	e0e2      	b.n	8003b10 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	2200      	movs	r2, #0
 8003952:	497b      	ldr	r1, [pc, #492]	; (8003b40 <HAL_I2C_Mem_Read+0x4c4>)
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 faf9 	bl	8003f4c <I2C_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0e9      	b.n	8003b38 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003972:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003974:	b672      	cpsid	i
}
 8003976:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039aa:	4b66      	ldr	r3, [pc, #408]	; (8003b44 <HAL_I2C_Mem_Read+0x4c8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	08db      	lsrs	r3, r3, #3
 80039b0:	4a65      	ldr	r2, [pc, #404]	; (8003b48 <HAL_I2C_Mem_Read+0x4cc>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0a1a      	lsrs	r2, r3, #8
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	00da      	lsls	r2, r3, #3
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d118      	bne.n	8003a02 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f043 0220 	orr.w	r2, r3, #32
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80039f2:	b662      	cpsie	i
}
 80039f4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e09a      	b.n	8003b38 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d1d9      	bne.n	80039c4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a52:	b662      	cpsie	i
}
 8003a54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a88:	e042      	b.n	8003b10 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fc06 	bl	80042a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e04c      	b.n	8003b38 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d118      	bne.n	8003b10 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f47f ae94 	bne.w	8003842 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e000      	b.n	8003b38 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003b36:	2302      	movs	r3, #2
  }
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3728      	adds	r7, #40	; 0x28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	00010004 	.word	0x00010004
 8003b44:	20000008 	.word	0x20000008
 8003b48:	14f8b589 	.word	0x14f8b589

08003b4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d006      	beq.n	8003b76 <I2C_MasterRequestWrite+0x2a>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d003      	beq.n	8003b76 <I2C_MasterRequestWrite+0x2a>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b74:	d108      	bne.n	8003b88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e00b      	b.n	8003ba0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	2b12      	cmp	r3, #18
 8003b8e:	d107      	bne.n	8003ba0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f9cd 	bl	8003f4c <I2C_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc6:	d103      	bne.n	8003bd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e035      	b.n	8003c40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bdc:	d108      	bne.n	8003bf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bde:	897b      	ldrh	r3, [r7, #10]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bec:	611a      	str	r2, [r3, #16]
 8003bee:	e01b      	b.n	8003c28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bf0:	897b      	ldrh	r3, [r7, #10]
 8003bf2:	11db      	asrs	r3, r3, #7
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 0306 	and.w	r3, r3, #6
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f063 030f 	orn	r3, r3, #15
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	490e      	ldr	r1, [pc, #56]	; (8003c48 <I2C_MasterRequestWrite+0xfc>)
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fa16 	bl	8004040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e010      	b.n	8003c40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c1e:	897b      	ldrh	r3, [r7, #10]
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4907      	ldr	r1, [pc, #28]	; (8003c4c <I2C_MasterRequestWrite+0x100>)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fa06 	bl	8004040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	00010008 	.word	0x00010008
 8003c4c:	00010002 	.word	0x00010002

08003c50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	4608      	mov	r0, r1
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4603      	mov	r3, r0
 8003c60:	817b      	strh	r3, [r7, #10]
 8003c62:	460b      	mov	r3, r1
 8003c64:	813b      	strh	r3, [r7, #8]
 8003c66:	4613      	mov	r3, r2
 8003c68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f960 	bl	8003f4c <I2C_WaitOnFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca0:	d103      	bne.n	8003caa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e05f      	b.n	8003d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cae:	897b      	ldrh	r3, [r7, #10]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	6a3a      	ldr	r2, [r7, #32]
 8003cc2:	492d      	ldr	r1, [pc, #180]	; (8003d78 <I2C_RequestMemoryWrite+0x128>)
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f9bb 	bl	8004040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e04c      	b.n	8003d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cec:	6a39      	ldr	r1, [r7, #32]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fa46 	bl	8004180 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d107      	bne.n	8003d12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e02b      	b.n	8003d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d105      	bne.n	8003d28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d1c:	893b      	ldrh	r3, [r7, #8]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	611a      	str	r2, [r3, #16]
 8003d26:	e021      	b.n	8003d6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d28:	893b      	ldrh	r3, [r7, #8]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	6a39      	ldr	r1, [r7, #32]
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 fa20 	bl	8004180 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d107      	bne.n	8003d5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e005      	b.n	8003d6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d62:	893b      	ldrh	r3, [r7, #8]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	00010002 	.word	0x00010002

08003d7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	4608      	mov	r0, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	817b      	strh	r3, [r7, #10]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	813b      	strh	r3, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003da4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f8c2 	bl	8003f4c <I2C_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00d      	beq.n	8003dea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ddc:	d103      	bne.n	8003de6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e0aa      	b.n	8003f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dea:	897b      	ldrh	r3, [r7, #10]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003df8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	6a3a      	ldr	r2, [r7, #32]
 8003dfe:	4952      	ldr	r1, [pc, #328]	; (8003f48 <I2C_RequestMemoryRead+0x1cc>)
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f91d 	bl	8004040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e097      	b.n	8003f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e28:	6a39      	ldr	r1, [r7, #32]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f9a8 	bl	8004180 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d107      	bne.n	8003e4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e076      	b.n	8003f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d105      	bne.n	8003e64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e58:	893b      	ldrh	r3, [r7, #8]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	611a      	str	r2, [r3, #16]
 8003e62:	e021      	b.n	8003ea8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e64:	893b      	ldrh	r3, [r7, #8]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e74:	6a39      	ldr	r1, [r7, #32]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f982 	bl	8004180 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00d      	beq.n	8003e9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d107      	bne.n	8003e9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e050      	b.n	8003f40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e9e:	893b      	ldrh	r3, [r7, #8]
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eaa:	6a39      	ldr	r1, [r7, #32]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f967 	bl	8004180 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00d      	beq.n	8003ed4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d107      	bne.n	8003ed0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ece:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e035      	b.n	8003f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f82b 	bl	8003f4c <I2C_WaitOnFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00d      	beq.n	8003f18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0a:	d103      	bne.n	8003f14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e013      	b.n	8003f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f18:	897b      	ldrh	r3, [r7, #10]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	6a3a      	ldr	r2, [r7, #32]
 8003f2c:	4906      	ldr	r1, [pc, #24]	; (8003f48 <I2C_RequestMemoryRead+0x1cc>)
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f886 	bl	8004040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	00010002 	.word	0x00010002

08003f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f5c:	e048      	b.n	8003ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d044      	beq.n	8003ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f66:	f7fe fd53 	bl	8002a10 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d302      	bcc.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d139      	bne.n	8003ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d10d      	bne.n	8003fa2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	43da      	mvns	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4013      	ands	r3, r2
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf0c      	ite	eq
 8003f98:	2301      	moveq	r3, #1
 8003f9a:	2300      	movne	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	e00c      	b.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	43da      	mvns	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4013      	ands	r3, r2
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d116      	bne.n	8003ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e023      	b.n	8004038 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d10d      	bne.n	8004016 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	43da      	mvns	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf0c      	ite	eq
 800400c:	2301      	moveq	r3, #1
 800400e:	2300      	movne	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	e00c      	b.n	8004030 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	43da      	mvns	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4013      	ands	r3, r2
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	429a      	cmp	r2, r3
 8004034:	d093      	beq.n	8003f5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800404e:	e071      	b.n	8004134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405e:	d123      	bne.n	80040a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	f043 0204 	orr.w	r2, r3, #4
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e067      	b.n	8004178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ae:	d041      	beq.n	8004134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b0:	f7fe fcae 	bl	8002a10 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d302      	bcc.n	80040c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d136      	bne.n	8004134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	0c1b      	lsrs	r3, r3, #16
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d10c      	bne.n	80040ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	43da      	mvns	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4013      	ands	r3, r2
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bf14      	ite	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	2300      	moveq	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	e00b      	b.n	8004102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	43da      	mvns	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	4013      	ands	r3, r2
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f043 0220 	orr.w	r2, r3, #32
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e021      	b.n	8004178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	0c1b      	lsrs	r3, r3, #16
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d10c      	bne.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	43da      	mvns	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4013      	ands	r3, r2
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf14      	ite	ne
 8004150:	2301      	movne	r3, #1
 8004152:	2300      	moveq	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	e00b      	b.n	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	43da      	mvns	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4013      	ands	r3, r2
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	bf14      	ite	ne
 800416a:	2301      	movne	r3, #1
 800416c:	2300      	moveq	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	f47f af6d 	bne.w	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800418c:	e034      	b.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f8e3 	bl	800435a <I2C_IsAcknowledgeFailed>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e034      	b.n	8004208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d028      	beq.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a6:	f7fe fc33 	bl	8002a10 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d302      	bcc.n	80041bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d11d      	bne.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b80      	cmp	r3, #128	; 0x80
 80041c8:	d016      	beq.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	f043 0220 	orr.w	r2, r3, #32
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e007      	b.n	8004208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004202:	2b80      	cmp	r3, #128	; 0x80
 8004204:	d1c3      	bne.n	800418e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800421c:	e034      	b.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f89b 	bl	800435a <I2C_IsAcknowledgeFailed>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e034      	b.n	8004298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d028      	beq.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004236:	f7fe fbeb 	bl	8002a10 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d11d      	bne.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b04      	cmp	r3, #4
 8004258:	d016      	beq.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	f043 0220 	orr.w	r2, r3, #32
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e007      	b.n	8004298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b04      	cmp	r3, #4
 8004294:	d1c3      	bne.n	800421e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042ac:	e049      	b.n	8004342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b10      	cmp	r3, #16
 80042ba:	d119      	bne.n	80042f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0210 	mvn.w	r2, #16
 80042c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e030      	b.n	8004352 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f0:	f7fe fb8e 	bl	8002a10 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d302      	bcc.n	8004306 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d11d      	bne.n	8004342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d016      	beq.n	8004342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f043 0220 	orr.w	r2, r3, #32
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e007      	b.n	8004352 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d1ae      	bne.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004370:	d11b      	bne.n	80043aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800437a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f043 0204 	orr.w	r2, r3, #4
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e272      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 8087 	beq.w	80044e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043d8:	4b92      	ldr	r3, [pc, #584]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d00c      	beq.n	80043fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043e4:	4b8f      	ldr	r3, [pc, #572]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 030c 	and.w	r3, r3, #12
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d112      	bne.n	8004416 <HAL_RCC_OscConfig+0x5e>
 80043f0:	4b8c      	ldr	r3, [pc, #560]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d10b      	bne.n	8004416 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043fe:	4b89      	ldr	r3, [pc, #548]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d06c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x12c>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d168      	bne.n	80044e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e24c      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441e:	d106      	bne.n	800442e <HAL_RCC_OscConfig+0x76>
 8004420:	4b80      	ldr	r3, [pc, #512]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a7f      	ldr	r2, [pc, #508]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	e02e      	b.n	800448c <HAL_RCC_OscConfig+0xd4>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10c      	bne.n	8004450 <HAL_RCC_OscConfig+0x98>
 8004436:	4b7b      	ldr	r3, [pc, #492]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a7a      	ldr	r2, [pc, #488]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 800443c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	4b78      	ldr	r3, [pc, #480]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a77      	ldr	r2, [pc, #476]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e01d      	b.n	800448c <HAL_RCC_OscConfig+0xd4>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0xbc>
 800445a:	4b72      	ldr	r3, [pc, #456]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a71      	ldr	r2, [pc, #452]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4b6f      	ldr	r3, [pc, #444]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a6e      	ldr	r2, [pc, #440]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e00b      	b.n	800448c <HAL_RCC_OscConfig+0xd4>
 8004474:	4b6b      	ldr	r3, [pc, #428]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6a      	ldr	r2, [pc, #424]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 800447a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b68      	ldr	r3, [pc, #416]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a67      	ldr	r2, [pc, #412]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d013      	beq.n	80044bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fe fabc 	bl	8002a10 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449c:	f7fe fab8 	bl	8002a10 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	; 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e200      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	4b5d      	ldr	r3, [pc, #372]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0xe4>
 80044ba:	e014      	b.n	80044e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fe faa8 	bl	8002a10 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c4:	f7fe faa4 	bl	8002a10 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	; 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e1ec      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	4b53      	ldr	r3, [pc, #332]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x10c>
 80044e2:	e000      	b.n	80044e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d063      	beq.n	80045ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044f2:	4b4c      	ldr	r3, [pc, #304]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00b      	beq.n	8004516 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044fe:	4b49      	ldr	r3, [pc, #292]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	2b08      	cmp	r3, #8
 8004508:	d11c      	bne.n	8004544 <HAL_RCC_OscConfig+0x18c>
 800450a:	4b46      	ldr	r3, [pc, #280]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d116      	bne.n	8004544 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004516:	4b43      	ldr	r3, [pc, #268]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_RCC_OscConfig+0x176>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d001      	beq.n	800452e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e1c0      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452e:	4b3d      	ldr	r3, [pc, #244]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4939      	ldr	r1, [pc, #228]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004542:	e03a      	b.n	80045ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800454c:	4b36      	ldr	r3, [pc, #216]	; (8004628 <HAL_RCC_OscConfig+0x270>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004552:	f7fe fa5d 	bl	8002a10 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455a:	f7fe fa59 	bl	8002a10 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e1a1      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456c:	4b2d      	ldr	r3, [pc, #180]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004578:	4b2a      	ldr	r3, [pc, #168]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4927      	ldr	r1, [pc, #156]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 8004588:	4313      	orrs	r3, r2
 800458a:	600b      	str	r3, [r1, #0]
 800458c:	e015      	b.n	80045ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800458e:	4b26      	ldr	r3, [pc, #152]	; (8004628 <HAL_RCC_OscConfig+0x270>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fe fa3c 	bl	8002a10 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800459c:	f7fe fa38 	bl	8002a10 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e180      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ae:	4b1d      	ldr	r3, [pc, #116]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d03a      	beq.n	800463c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d019      	beq.n	8004602 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ce:	4b17      	ldr	r3, [pc, #92]	; (800462c <HAL_RCC_OscConfig+0x274>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d4:	f7fe fa1c 	bl	8002a10 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045dc:	f7fe fa18 	bl	8002a10 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e160      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ee:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <HAL_RCC_OscConfig+0x26c>)
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045fa:	2001      	movs	r0, #1
 80045fc:	f000 faba 	bl	8004b74 <RCC_Delay>
 8004600:	e01c      	b.n	800463c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <HAL_RCC_OscConfig+0x274>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004608:	f7fe fa02 	bl	8002a10 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460e:	e00f      	b.n	8004630 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004610:	f7fe f9fe 	bl	8002a10 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d908      	bls.n	8004630 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e146      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
 8004622:	bf00      	nop
 8004624:	40021000 	.word	0x40021000
 8004628:	42420000 	.word	0x42420000
 800462c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004630:	4b92      	ldr	r3, [pc, #584]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e9      	bne.n	8004610 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80a6 	beq.w	8004796 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464e:	4b8b      	ldr	r3, [pc, #556]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10d      	bne.n	8004676 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465a:	4b88      	ldr	r3, [pc, #544]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	4a87      	ldr	r2, [pc, #540]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 8004660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004664:	61d3      	str	r3, [r2, #28]
 8004666:	4b85      	ldr	r3, [pc, #532]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004672:	2301      	movs	r3, #1
 8004674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004676:	4b82      	ldr	r3, [pc, #520]	; (8004880 <HAL_RCC_OscConfig+0x4c8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d118      	bne.n	80046b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004682:	4b7f      	ldr	r3, [pc, #508]	; (8004880 <HAL_RCC_OscConfig+0x4c8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a7e      	ldr	r2, [pc, #504]	; (8004880 <HAL_RCC_OscConfig+0x4c8>)
 8004688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468e:	f7fe f9bf 	bl	8002a10 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004696:	f7fe f9bb 	bl	8002a10 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b64      	cmp	r3, #100	; 0x64
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e103      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a8:	4b75      	ldr	r3, [pc, #468]	; (8004880 <HAL_RCC_OscConfig+0x4c8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d106      	bne.n	80046ca <HAL_RCC_OscConfig+0x312>
 80046bc:	4b6f      	ldr	r3, [pc, #444]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	4a6e      	ldr	r2, [pc, #440]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	6213      	str	r3, [r2, #32]
 80046c8:	e02d      	b.n	8004726 <HAL_RCC_OscConfig+0x36e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10c      	bne.n	80046ec <HAL_RCC_OscConfig+0x334>
 80046d2:	4b6a      	ldr	r3, [pc, #424]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	4a69      	ldr	r2, [pc, #420]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	6213      	str	r3, [r2, #32]
 80046de:	4b67      	ldr	r3, [pc, #412]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	4a66      	ldr	r2, [pc, #408]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	f023 0304 	bic.w	r3, r3, #4
 80046e8:	6213      	str	r3, [r2, #32]
 80046ea:	e01c      	b.n	8004726 <HAL_RCC_OscConfig+0x36e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	2b05      	cmp	r3, #5
 80046f2:	d10c      	bne.n	800470e <HAL_RCC_OscConfig+0x356>
 80046f4:	4b61      	ldr	r3, [pc, #388]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	4a60      	ldr	r2, [pc, #384]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 80046fa:	f043 0304 	orr.w	r3, r3, #4
 80046fe:	6213      	str	r3, [r2, #32]
 8004700:	4b5e      	ldr	r3, [pc, #376]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	4a5d      	ldr	r2, [pc, #372]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	6213      	str	r3, [r2, #32]
 800470c:	e00b      	b.n	8004726 <HAL_RCC_OscConfig+0x36e>
 800470e:	4b5b      	ldr	r3, [pc, #364]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	4a5a      	ldr	r2, [pc, #360]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	6213      	str	r3, [r2, #32]
 800471a:	4b58      	ldr	r3, [pc, #352]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	4a57      	ldr	r2, [pc, #348]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 8004720:	f023 0304 	bic.w	r3, r3, #4
 8004724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d015      	beq.n	800475a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472e:	f7fe f96f 	bl	8002a10 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004734:	e00a      	b.n	800474c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fe f96b 	bl	8002a10 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	; 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e0b1      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474c:	4b4b      	ldr	r3, [pc, #300]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ee      	beq.n	8004736 <HAL_RCC_OscConfig+0x37e>
 8004758:	e014      	b.n	8004784 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475a:	f7fe f959 	bl	8002a10 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004760:	e00a      	b.n	8004778 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004762:	f7fe f955 	bl	8002a10 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004770:	4293      	cmp	r3, r2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e09b      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004778:	4b40      	ldr	r3, [pc, #256]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1ee      	bne.n	8004762 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d105      	bne.n	8004796 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478a:	4b3c      	ldr	r3, [pc, #240]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	4a3b      	ldr	r2, [pc, #236]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 8004790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004794:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8087 	beq.w	80048ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a0:	4b36      	ldr	r3, [pc, #216]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 030c 	and.w	r3, r3, #12
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d061      	beq.n	8004870 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d146      	bne.n	8004842 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b4:	4b33      	ldr	r3, [pc, #204]	; (8004884 <HAL_RCC_OscConfig+0x4cc>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ba:	f7fe f929 	bl	8002a10 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c2:	f7fe f925 	bl	8002a10 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e06d      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047d4:	4b29      	ldr	r3, [pc, #164]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f0      	bne.n	80047c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e8:	d108      	bne.n	80047fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	4921      	ldr	r1, [pc, #132]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047fc:	4b1f      	ldr	r3, [pc, #124]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a19      	ldr	r1, [r3, #32]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	430b      	orrs	r3, r1
 800480e:	491b      	ldr	r1, [pc, #108]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004814:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_RCC_OscConfig+0x4cc>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481a:	f7fe f8f9 	bl	8002a10 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004822:	f7fe f8f5 	bl	8002a10 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e03d      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004834:	4b11      	ldr	r3, [pc, #68]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x46a>
 8004840:	e035      	b.n	80048ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	4b10      	ldr	r3, [pc, #64]	; (8004884 <HAL_RCC_OscConfig+0x4cc>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fe f8e2 	bl	8002a10 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004850:	f7fe f8de 	bl	8002a10 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e026      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_RCC_OscConfig+0x4c4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x498>
 800486e:	e01e      	b.n	80048ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d107      	bne.n	8004888 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e019      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
 800487c:	40021000 	.word	0x40021000
 8004880:	40007000 	.word	0x40007000
 8004884:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004888:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCC_OscConfig+0x500>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	429a      	cmp	r2, r3
 800489a:	d106      	bne.n	80048aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d001      	beq.n	80048ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021000 	.word	0x40021000

080048bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0d0      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048d0:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d910      	bls.n	8004900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b67      	ldr	r3, [pc, #412]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 0207 	bic.w	r2, r3, #7
 80048e6:	4965      	ldr	r1, [pc, #404]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ee:	4b63      	ldr	r3, [pc, #396]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d001      	beq.n	8004900 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0b8      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d020      	beq.n	800494e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004918:	4b59      	ldr	r3, [pc, #356]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	4a58      	ldr	r2, [pc, #352]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 800491e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004922:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004930:	4b53      	ldr	r3, [pc, #332]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	4a52      	ldr	r2, [pc, #328]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004936:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800493a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800493c:	4b50      	ldr	r3, [pc, #320]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	494d      	ldr	r1, [pc, #308]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 800494a:	4313      	orrs	r3, r2
 800494c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d040      	beq.n	80049dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d107      	bne.n	8004972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004962:	4b47      	ldr	r3, [pc, #284]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d115      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e07f      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497a:	4b41      	ldr	r3, [pc, #260]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e073      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498a:	4b3d      	ldr	r3, [pc, #244]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e06b      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499a:	4b39      	ldr	r3, [pc, #228]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4936      	ldr	r1, [pc, #216]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049ac:	f7fe f830 	bl	8002a10 <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b4:	f7fe f82c 	bl	8002a10 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e053      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	4b2d      	ldr	r3, [pc, #180]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 020c 	and.w	r2, r3, #12
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1eb      	bne.n	80049b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049dc:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d210      	bcs.n	8004a0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 0207 	bic.w	r2, r3, #7
 80049f2:	4922      	ldr	r1, [pc, #136]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	4b20      	ldr	r3, [pc, #128]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e032      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a18:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	4916      	ldr	r1, [pc, #88]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a36:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	490e      	ldr	r1, [pc, #56]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a4a:	f000 f821 	bl	8004a90 <HAL_RCC_GetSysClockFreq>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	490a      	ldr	r1, [pc, #40]	; (8004a84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a5c:	5ccb      	ldrb	r3, [r1, r3]
 8004a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a62:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <HAL_RCC_ClockConfig+0x1cc>)
 8004a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_RCC_ClockConfig+0x1d0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fd ff8e 	bl	800298c <HAL_InitTick>

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40022000 	.word	0x40022000
 8004a80:	40021000 	.word	0x40021000
 8004a84:	08006814 	.word	0x08006814
 8004a88:	20000008 	.word	0x20000008
 8004a8c:	2000000c 	.word	0x2000000c

08004a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004aaa:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d002      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x30>
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d003      	beq.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x36>
 8004abe:	e027      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ac0:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ac2:	613b      	str	r3, [r7, #16]
      break;
 8004ac4:	e027      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	0c9b      	lsrs	r3, r3, #18
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	4a17      	ldr	r2, [pc, #92]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ad0:	5cd3      	ldrb	r3, [r2, r3]
 8004ad2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d010      	beq.n	8004b00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	0c5b      	lsrs	r3, r3, #17
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	4a11      	ldr	r2, [pc, #68]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004aea:	5cd3      	ldrb	r3, [r2, r3]
 8004aec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a0d      	ldr	r2, [pc, #52]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8004af2:	fb03 f202 	mul.w	r2, r3, r2
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e004      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a0c      	ldr	r2, [pc, #48]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b04:	fb02 f303 	mul.w	r3, r2, r3
 8004b08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	613b      	str	r3, [r7, #16]
      break;
 8004b0e:	e002      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b12:	613b      	str	r3, [r7, #16]
      break;
 8004b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b16:	693b      	ldr	r3, [r7, #16]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40021000 	.word	0x40021000
 8004b28:	007a1200 	.word	0x007a1200
 8004b2c:	0800682c 	.word	0x0800682c
 8004b30:	0800683c 	.word	0x0800683c
 8004b34:	003d0900 	.word	0x003d0900

08004b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b3c:	4b02      	ldr	r3, [pc, #8]	; (8004b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr
 8004b48:	20000008 	.word	0x20000008

08004b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b50:	f7ff fff2 	bl	8004b38 <HAL_RCC_GetHCLKFreq>
 8004b54:	4602      	mov	r2, r0
 8004b56:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	4903      	ldr	r1, [pc, #12]	; (8004b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b62:	5ccb      	ldrb	r3, [r1, r3]
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	08006824 	.word	0x08006824

08004b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <RCC_Delay+0x34>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <RCC_Delay+0x38>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	0a5b      	lsrs	r3, r3, #9
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b90:	bf00      	nop
  }
  while (Delay --);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1e5a      	subs	r2, r3, #1
 8004b96:	60fa      	str	r2, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f9      	bne.n	8004b90 <RCC_Delay+0x1c>
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr
 8004ba8:	20000008 	.word	0x20000008
 8004bac:	10624dd3 	.word	0x10624dd3

08004bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e041      	b.n	8004c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fd fdc4 	bl	8002764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3304      	adds	r3, #4
 8004bec:	4619      	mov	r1, r3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	f000 fd80 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d001      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e03a      	b.n	8004cde <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <HAL_TIM_Base_Start_IT+0x98>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x58>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c92:	d009      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x58>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a14      	ldr	r2, [pc, #80]	; (8004cec <HAL_TIM_Base_Start_IT+0x9c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x58>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d111      	bne.n	8004ccc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d010      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	e007      	b.n	8004cdc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40000400 	.word	0x40000400
 8004cf0:	40000800 	.word	0x40000800

08004cf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e041      	b.n	8004d8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fd fd46 	bl	80027ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f000 fcde 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d109      	bne.n	8004db8 <HAL_TIM_PWM_Start+0x24>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	bf14      	ite	ne
 8004db0:	2301      	movne	r3, #1
 8004db2:	2300      	moveq	r3, #0
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	e022      	b.n	8004dfe <HAL_TIM_PWM_Start+0x6a>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d109      	bne.n	8004dd2 <HAL_TIM_PWM_Start+0x3e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	bf14      	ite	ne
 8004dca:	2301      	movne	r3, #1
 8004dcc:	2300      	moveq	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	e015      	b.n	8004dfe <HAL_TIM_PWM_Start+0x6a>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d109      	bne.n	8004dec <HAL_TIM_PWM_Start+0x58>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	bf14      	ite	ne
 8004de4:	2301      	movne	r3, #1
 8004de6:	2300      	moveq	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	e008      	b.n	8004dfe <HAL_TIM_PWM_Start+0x6a>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	bf14      	ite	ne
 8004df8:	2301      	movne	r3, #1
 8004dfa:	2300      	moveq	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e05e      	b.n	8004ec4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_PWM_Start+0x82>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e14:	e013      	b.n	8004e3e <HAL_TIM_PWM_Start+0xaa>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_PWM_Start+0x92>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e24:	e00b      	b.n	8004e3e <HAL_TIM_PWM_Start+0xaa>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_PWM_Start+0xa2>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e34:	e003      	b.n	8004e3e <HAL_TIM_PWM_Start+0xaa>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2201      	movs	r2, #1
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fed4 	bl	8005bf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1e      	ldr	r2, [pc, #120]	; (8004ecc <HAL_TIM_PWM_Start+0x138>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d107      	bne.n	8004e66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a18      	ldr	r2, [pc, #96]	; (8004ecc <HAL_TIM_PWM_Start+0x138>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00e      	beq.n	8004e8e <HAL_TIM_PWM_Start+0xfa>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e78:	d009      	beq.n	8004e8e <HAL_TIM_PWM_Start+0xfa>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a14      	ldr	r2, [pc, #80]	; (8004ed0 <HAL_TIM_PWM_Start+0x13c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <HAL_TIM_PWM_Start+0xfa>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a12      	ldr	r2, [pc, #72]	; (8004ed4 <HAL_TIM_PWM_Start+0x140>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d111      	bne.n	8004eb2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b06      	cmp	r3, #6
 8004e9e:	d010      	beq.n	8004ec2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb0:	e007      	b.n	8004ec2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0201 	orr.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800

08004ed8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e093      	b.n	8005014 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7fd fbe7 	bl	80026d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f1c:	f023 0307 	bic.w	r3, r3, #7
 8004f20:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	f000 fbe1 	bl	80056f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f78:	f023 030c 	bic.w	r3, r3, #12
 8004f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	4313      	orrs	r3, r2
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	011a      	lsls	r2, r3, #4
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	031b      	lsls	r3, r3, #12
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800502c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005034:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800503c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005044:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d110      	bne.n	800506e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d102      	bne.n	8005058 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005052:	7b7b      	ldrb	r3, [r7, #13]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d001      	beq.n	800505c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e089      	b.n	8005170 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800506c:	e031      	b.n	80050d2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b04      	cmp	r3, #4
 8005072:	d110      	bne.n	8005096 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005074:	7bbb      	ldrb	r3, [r7, #14]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d102      	bne.n	8005080 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800507a:	7b3b      	ldrb	r3, [r7, #12]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d001      	beq.n	8005084 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e075      	b.n	8005170 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005094:	e01d      	b.n	80050d2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d108      	bne.n	80050ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800509c:	7bbb      	ldrb	r3, [r7, #14]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d105      	bne.n	80050ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050a2:	7b7b      	ldrb	r3, [r7, #13]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d102      	bne.n	80050ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050a8:	7b3b      	ldrb	r3, [r7, #12]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d001      	beq.n	80050b2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e05e      	b.n	8005170 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d010      	beq.n	8005100 <HAL_TIM_Encoder_Start_IT+0xe4>
 80050de:	e01f      	b.n	8005120 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2201      	movs	r2, #1
 80050e6:	2100      	movs	r1, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fd83 	bl	8005bf4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0202 	orr.w	r2, r2, #2
 80050fc:	60da      	str	r2, [r3, #12]
      break;
 80050fe:	e02e      	b.n	800515e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2201      	movs	r2, #1
 8005106:	2104      	movs	r1, #4
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fd73 	bl	8005bf4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0204 	orr.w	r2, r2, #4
 800511c:	60da      	str	r2, [r3, #12]
      break;
 800511e:	e01e      	b.n	800515e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2201      	movs	r2, #1
 8005126:	2100      	movs	r1, #0
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fd63 	bl	8005bf4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2201      	movs	r2, #1
 8005134:	2104      	movs	r1, #4
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fd5c 	bl	8005bf4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0202 	orr.w	r2, r2, #2
 800514a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0204 	orr.w	r2, r2, #4
 800515a:	60da      	str	r2, [r3, #12]
      break;
 800515c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b02      	cmp	r3, #2
 800518c:	d122      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b02      	cmp	r3, #2
 800519a:	d11b      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0202 	mvn.w	r2, #2
 80051a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fa7f 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 80051c0:	e005      	b.n	80051ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fa72 	bl	80056ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fa81 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d122      	bne.n	8005228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d11b      	bne.n	8005228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0204 	mvn.w	r2, #4
 80051f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fa55 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 8005214:	e005      	b.n	8005222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa48 	bl	80056ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fa57 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b08      	cmp	r3, #8
 8005234:	d122      	bne.n	800527c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b08      	cmp	r3, #8
 8005242:	d11b      	bne.n	800527c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0208 	mvn.w	r2, #8
 800524c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2204      	movs	r2, #4
 8005252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa2b 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fa1e 	bl	80056ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fa2d 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0310 	and.w	r3, r3, #16
 8005286:	2b10      	cmp	r3, #16
 8005288:	d122      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b10      	cmp	r3, #16
 8005296:	d11b      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0210 	mvn.w	r2, #16
 80052a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2208      	movs	r2, #8
 80052a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa01 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 80052bc:	e005      	b.n	80052ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f9f4 	bl	80056ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fa03 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d10e      	bne.n	80052fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d107      	bne.n	80052fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0201 	mvn.w	r2, #1
 80052f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f9cf 	bl	800569a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005306:	2b80      	cmp	r3, #128	; 0x80
 8005308:	d10e      	bne.n	8005328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005314:	2b80      	cmp	r3, #128	; 0x80
 8005316:	d107      	bne.n	8005328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fcf1 	bl	8005d0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d10e      	bne.n	8005354 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	d107      	bne.n	8005354 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800534c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f9c7 	bl	80056e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b20      	cmp	r3, #32
 8005360:	d10e      	bne.n	8005380 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b20      	cmp	r3, #32
 800536e:	d107      	bne.n	8005380 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0220 	mvn.w	r2, #32
 8005378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fcbc 	bl	8005cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e0ae      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b0c      	cmp	r3, #12
 80053b2:	f200 809f 	bhi.w	80054f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053b6:	a201      	add	r2, pc, #4	; (adr r2, 80053bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	080053f1 	.word	0x080053f1
 80053c0:	080054f5 	.word	0x080054f5
 80053c4:	080054f5 	.word	0x080054f5
 80053c8:	080054f5 	.word	0x080054f5
 80053cc:	08005431 	.word	0x08005431
 80053d0:	080054f5 	.word	0x080054f5
 80053d4:	080054f5 	.word	0x080054f5
 80053d8:	080054f5 	.word	0x080054f5
 80053dc:	08005473 	.word	0x08005473
 80053e0:	080054f5 	.word	0x080054f5
 80053e4:	080054f5 	.word	0x080054f5
 80053e8:	080054f5 	.word	0x080054f5
 80053ec:	080054b3 	.word	0x080054b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f9de 	bl	80057b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0208 	orr.w	r2, r2, #8
 800540a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0204 	bic.w	r2, r2, #4
 800541a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6999      	ldr	r1, [r3, #24]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	619a      	str	r2, [r3, #24]
      break;
 800542e:	e064      	b.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fa24 	bl	8005884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800544a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6999      	ldr	r1, [r3, #24]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	021a      	lsls	r2, r3, #8
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	619a      	str	r2, [r3, #24]
      break;
 8005470:	e043      	b.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fa6d 	bl	8005958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69da      	ldr	r2, [r3, #28]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0208 	orr.w	r2, r2, #8
 800548c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0204 	bic.w	r2, r2, #4
 800549c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69d9      	ldr	r1, [r3, #28]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	61da      	str	r2, [r3, #28]
      break;
 80054b0:	e023      	b.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fab7 	bl	8005a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69d9      	ldr	r1, [r3, #28]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	021a      	lsls	r2, r3, #8
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	61da      	str	r2, [r3, #28]
      break;
 80054f2:	e002      	b.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	75fb      	strb	r3, [r7, #23]
      break;
 80054f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005502:	7dfb      	ldrb	r3, [r7, #23]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_TIM_ConfigClockSource+0x1c>
 8005524:	2302      	movs	r3, #2
 8005526:	e0b4      	b.n	8005692 <HAL_TIM_ConfigClockSource+0x186>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800554e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005560:	d03e      	beq.n	80055e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005566:	f200 8087 	bhi.w	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 800556a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800556e:	f000 8086 	beq.w	800567e <HAL_TIM_ConfigClockSource+0x172>
 8005572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005576:	d87f      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 8005578:	2b70      	cmp	r3, #112	; 0x70
 800557a:	d01a      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0xa6>
 800557c:	2b70      	cmp	r3, #112	; 0x70
 800557e:	d87b      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 8005580:	2b60      	cmp	r3, #96	; 0x60
 8005582:	d050      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0x11a>
 8005584:	2b60      	cmp	r3, #96	; 0x60
 8005586:	d877      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 8005588:	2b50      	cmp	r3, #80	; 0x50
 800558a:	d03c      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0xfa>
 800558c:	2b50      	cmp	r3, #80	; 0x50
 800558e:	d873      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d058      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x13a>
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	d86f      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 8005598:	2b30      	cmp	r3, #48	; 0x30
 800559a:	d064      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x15a>
 800559c:	2b30      	cmp	r3, #48	; 0x30
 800559e:	d86b      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d060      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x15a>
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	d867      	bhi.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d05c      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x15a>
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d05a      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x15a>
 80055b0:	e062      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	6899      	ldr	r1, [r3, #8]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f000 faf8 	bl	8005bb6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	609a      	str	r2, [r3, #8]
      break;
 80055de:	e04f      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6899      	ldr	r1, [r3, #8]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f000 fae1 	bl	8005bb6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005602:	609a      	str	r2, [r3, #8]
      break;
 8005604:	e03c      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6859      	ldr	r1, [r3, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	461a      	mov	r2, r3
 8005614:	f000 fa58 	bl	8005ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2150      	movs	r1, #80	; 0x50
 800561e:	4618      	mov	r0, r3
 8005620:	f000 faaf 	bl	8005b82 <TIM_ITRx_SetConfig>
      break;
 8005624:	e02c      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6859      	ldr	r1, [r3, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	461a      	mov	r2, r3
 8005634:	f000 fa76 	bl	8005b24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2160      	movs	r1, #96	; 0x60
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fa9f 	bl	8005b82 <TIM_ITRx_SetConfig>
      break;
 8005644:	e01c      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6859      	ldr	r1, [r3, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	461a      	mov	r2, r3
 8005654:	f000 fa38 	bl	8005ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2140      	movs	r1, #64	; 0x40
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fa8f 	bl	8005b82 <TIM_ITRx_SetConfig>
      break;
 8005664:	e00c      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f000 fa86 	bl	8005b82 <TIM_ITRx_SetConfig>
      break;
 8005676:	e003      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	73fb      	strb	r3, [r7, #15]
      break;
 800567c:	e000      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800567e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005690:	7bfb      	ldrb	r3, [r7, #15]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr

080056f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a29      	ldr	r2, [pc, #164]	; (80057ac <TIM_Base_SetConfig+0xb8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00b      	beq.n	8005724 <TIM_Base_SetConfig+0x30>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005712:	d007      	beq.n	8005724 <TIM_Base_SetConfig+0x30>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <TIM_Base_SetConfig+0xbc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_Base_SetConfig+0x30>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a25      	ldr	r2, [pc, #148]	; (80057b4 <TIM_Base_SetConfig+0xc0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d108      	bne.n	8005736 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a1c      	ldr	r2, [pc, #112]	; (80057ac <TIM_Base_SetConfig+0xb8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00b      	beq.n	8005756 <TIM_Base_SetConfig+0x62>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005744:	d007      	beq.n	8005756 <TIM_Base_SetConfig+0x62>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a19      	ldr	r2, [pc, #100]	; (80057b0 <TIM_Base_SetConfig+0xbc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_Base_SetConfig+0x62>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a18      	ldr	r2, [pc, #96]	; (80057b4 <TIM_Base_SetConfig+0xc0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d108      	bne.n	8005768 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a07      	ldr	r2, [pc, #28]	; (80057ac <TIM_Base_SetConfig+0xb8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d103      	bne.n	800579c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	615a      	str	r2, [r3, #20]
}
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40000800 	.word	0x40000800

080057b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	f023 0201 	bic.w	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0303 	bic.w	r3, r3, #3
 80057ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f023 0302 	bic.w	r3, r3, #2
 8005800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <TIM_OC1_SetConfig+0xc8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d10c      	bne.n	800582e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f023 0308 	bic.w	r3, r3, #8
 800581a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f023 0304 	bic.w	r3, r3, #4
 800582c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a13      	ldr	r2, [pc, #76]	; (8005880 <TIM_OC1_SetConfig+0xc8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d111      	bne.n	800585a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800583c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	621a      	str	r2, [r3, #32]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40012c00 	.word	0x40012c00

08005884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f023 0210 	bic.w	r2, r3, #16
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f023 0320 	bic.w	r3, r3, #32
 80058ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a1d      	ldr	r2, [pc, #116]	; (8005954 <TIM_OC2_SetConfig+0xd0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d10d      	bne.n	8005900 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a14      	ldr	r2, [pc, #80]	; (8005954 <TIM_OC2_SetConfig+0xd0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d113      	bne.n	8005930 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800590e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	621a      	str	r2, [r3, #32]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr
 8005954:	40012c00 	.word	0x40012c00

08005958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0303 	bic.w	r3, r3, #3
 800598e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a1d      	ldr	r2, [pc, #116]	; (8005a28 <TIM_OC3_SetConfig+0xd0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d10d      	bne.n	80059d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a14      	ldr	r2, [pc, #80]	; (8005a28 <TIM_OC3_SetConfig+0xd0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d113      	bne.n	8005a02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	621a      	str	r2, [r3, #32]
}
 8005a1c:	bf00      	nop
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40012c00 	.word	0x40012c00

08005a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	031b      	lsls	r3, r3, #12
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a0f      	ldr	r2, [pc, #60]	; (8005ac4 <TIM_OC4_SetConfig+0x98>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d109      	bne.n	8005aa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	019b      	lsls	r3, r3, #6
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr
 8005ac4:	40012c00 	.word	0x40012c00

08005ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	f023 0201 	bic.w	r2, r3, #1
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f023 030a 	bic.w	r3, r3, #10
 8005b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr

08005b24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f023 0210 	bic.w	r2, r3, #16
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	031b      	lsls	r3, r3, #12
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	621a      	str	r2, [r3, #32]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr

08005b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f043 0307 	orr.w	r3, r3, #7
 8005ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	609a      	str	r2, [r3, #8]
}
 8005bac:	bf00      	nop
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr

08005bb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b087      	sub	sp, #28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	021a      	lsls	r2, r3, #8
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	609a      	str	r2, [r3, #8]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr

08005bf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 031f 	and.w	r3, r3, #31
 8005c06:	2201      	movs	r2, #1
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1a      	ldr	r2, [r3, #32]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	43db      	mvns	r3, r3
 8005c16:	401a      	ands	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a1a      	ldr	r2, [r3, #32]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f003 031f 	and.w	r3, r3, #31
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e046      	b.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a16      	ldr	r2, [pc, #88]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00e      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d009      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a12      	ldr	r2, [pc, #72]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d004      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a10      	ldr	r2, [pc, #64]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr
 8005cec:	40012c00 	.word	0x40012c00
 8005cf0:	40000400 	.word	0x40000400
 8005cf4:	40000800 	.word	0x40000800

08005cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr

08005d0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr

08005d1c <__errno>:
 8005d1c:	4b01      	ldr	r3, [pc, #4]	; (8005d24 <__errno+0x8>)
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	20000014 	.word	0x20000014

08005d28 <__libc_init_array>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	2600      	movs	r6, #0
 8005d2c:	4d0c      	ldr	r5, [pc, #48]	; (8005d60 <__libc_init_array+0x38>)
 8005d2e:	4c0d      	ldr	r4, [pc, #52]	; (8005d64 <__libc_init_array+0x3c>)
 8005d30:	1b64      	subs	r4, r4, r5
 8005d32:	10a4      	asrs	r4, r4, #2
 8005d34:	42a6      	cmp	r6, r4
 8005d36:	d109      	bne.n	8005d4c <__libc_init_array+0x24>
 8005d38:	f000 fc9c 	bl	8006674 <_init>
 8005d3c:	2600      	movs	r6, #0
 8005d3e:	4d0a      	ldr	r5, [pc, #40]	; (8005d68 <__libc_init_array+0x40>)
 8005d40:	4c0a      	ldr	r4, [pc, #40]	; (8005d6c <__libc_init_array+0x44>)
 8005d42:	1b64      	subs	r4, r4, r5
 8005d44:	10a4      	asrs	r4, r4, #2
 8005d46:	42a6      	cmp	r6, r4
 8005d48:	d105      	bne.n	8005d56 <__libc_init_array+0x2e>
 8005d4a:	bd70      	pop	{r4, r5, r6, pc}
 8005d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d50:	4798      	blx	r3
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7ee      	b.n	8005d34 <__libc_init_array+0xc>
 8005d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d5a:	4798      	blx	r3
 8005d5c:	3601      	adds	r6, #1
 8005d5e:	e7f2      	b.n	8005d46 <__libc_init_array+0x1e>
 8005d60:	0800687c 	.word	0x0800687c
 8005d64:	0800687c 	.word	0x0800687c
 8005d68:	0800687c 	.word	0x0800687c
 8005d6c:	08006880 	.word	0x08006880

08005d70 <memset>:
 8005d70:	4603      	mov	r3, r0
 8005d72:	4402      	add	r2, r0
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d100      	bne.n	8005d7a <memset+0xa>
 8005d78:	4770      	bx	lr
 8005d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d7e:	e7f9      	b.n	8005d74 <memset+0x4>

08005d80 <siprintf>:
 8005d80:	b40e      	push	{r1, r2, r3}
 8005d82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d86:	b500      	push	{lr}
 8005d88:	b09c      	sub	sp, #112	; 0x70
 8005d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8005d8c:	9002      	str	r0, [sp, #8]
 8005d8e:	9006      	str	r0, [sp, #24]
 8005d90:	9107      	str	r1, [sp, #28]
 8005d92:	9104      	str	r1, [sp, #16]
 8005d94:	4808      	ldr	r0, [pc, #32]	; (8005db8 <siprintf+0x38>)
 8005d96:	4909      	ldr	r1, [pc, #36]	; (8005dbc <siprintf+0x3c>)
 8005d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d9c:	9105      	str	r1, [sp, #20]
 8005d9e:	6800      	ldr	r0, [r0, #0]
 8005da0:	a902      	add	r1, sp, #8
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	f000 f868 	bl	8005e78 <_svfiprintf_r>
 8005da8:	2200      	movs	r2, #0
 8005daa:	9b02      	ldr	r3, [sp, #8]
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	b01c      	add	sp, #112	; 0x70
 8005db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005db4:	b003      	add	sp, #12
 8005db6:	4770      	bx	lr
 8005db8:	20000014 	.word	0x20000014
 8005dbc:	ffff0208 	.word	0xffff0208

08005dc0 <__ssputs_r>:
 8005dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc4:	688e      	ldr	r6, [r1, #8]
 8005dc6:	4682      	mov	sl, r0
 8005dc8:	429e      	cmp	r6, r3
 8005dca:	460c      	mov	r4, r1
 8005dcc:	4690      	mov	r8, r2
 8005dce:	461f      	mov	r7, r3
 8005dd0:	d838      	bhi.n	8005e44 <__ssputs_r+0x84>
 8005dd2:	898a      	ldrh	r2, [r1, #12]
 8005dd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005dd8:	d032      	beq.n	8005e40 <__ssputs_r+0x80>
 8005dda:	6825      	ldr	r5, [r4, #0]
 8005ddc:	6909      	ldr	r1, [r1, #16]
 8005dde:	3301      	adds	r3, #1
 8005de0:	eba5 0901 	sub.w	r9, r5, r1
 8005de4:	6965      	ldr	r5, [r4, #20]
 8005de6:	444b      	add	r3, r9
 8005de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005df0:	106d      	asrs	r5, r5, #1
 8005df2:	429d      	cmp	r5, r3
 8005df4:	bf38      	it	cc
 8005df6:	461d      	movcc	r5, r3
 8005df8:	0553      	lsls	r3, r2, #21
 8005dfa:	d531      	bpl.n	8005e60 <__ssputs_r+0xa0>
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	f000 fb6f 	bl	80064e0 <_malloc_r>
 8005e02:	4606      	mov	r6, r0
 8005e04:	b950      	cbnz	r0, 8005e1c <__ssputs_r+0x5c>
 8005e06:	230c      	movs	r3, #12
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0c:	f8ca 3000 	str.w	r3, [sl]
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e16:	81a3      	strh	r3, [r4, #12]
 8005e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1c:	464a      	mov	r2, r9
 8005e1e:	6921      	ldr	r1, [r4, #16]
 8005e20:	f000 face 	bl	80063c0 <memcpy>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	6126      	str	r6, [r4, #16]
 8005e32:	444e      	add	r6, r9
 8005e34:	6026      	str	r6, [r4, #0]
 8005e36:	463e      	mov	r6, r7
 8005e38:	6165      	str	r5, [r4, #20]
 8005e3a:	eba5 0509 	sub.w	r5, r5, r9
 8005e3e:	60a5      	str	r5, [r4, #8]
 8005e40:	42be      	cmp	r6, r7
 8005e42:	d900      	bls.n	8005e46 <__ssputs_r+0x86>
 8005e44:	463e      	mov	r6, r7
 8005e46:	4632      	mov	r2, r6
 8005e48:	4641      	mov	r1, r8
 8005e4a:	6820      	ldr	r0, [r4, #0]
 8005e4c:	f000 fac6 	bl	80063dc <memmove>
 8005e50:	68a3      	ldr	r3, [r4, #8]
 8005e52:	2000      	movs	r0, #0
 8005e54:	1b9b      	subs	r3, r3, r6
 8005e56:	60a3      	str	r3, [r4, #8]
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	4433      	add	r3, r6
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	e7db      	b.n	8005e18 <__ssputs_r+0x58>
 8005e60:	462a      	mov	r2, r5
 8005e62:	f000 fbb1 	bl	80065c8 <_realloc_r>
 8005e66:	4606      	mov	r6, r0
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d1e1      	bne.n	8005e30 <__ssputs_r+0x70>
 8005e6c:	4650      	mov	r0, sl
 8005e6e:	6921      	ldr	r1, [r4, #16]
 8005e70:	f000 face 	bl	8006410 <_free_r>
 8005e74:	e7c7      	b.n	8005e06 <__ssputs_r+0x46>
	...

08005e78 <_svfiprintf_r>:
 8005e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	4698      	mov	r8, r3
 8005e7e:	898b      	ldrh	r3, [r1, #12]
 8005e80:	4607      	mov	r7, r0
 8005e82:	061b      	lsls	r3, r3, #24
 8005e84:	460d      	mov	r5, r1
 8005e86:	4614      	mov	r4, r2
 8005e88:	b09d      	sub	sp, #116	; 0x74
 8005e8a:	d50e      	bpl.n	8005eaa <_svfiprintf_r+0x32>
 8005e8c:	690b      	ldr	r3, [r1, #16]
 8005e8e:	b963      	cbnz	r3, 8005eaa <_svfiprintf_r+0x32>
 8005e90:	2140      	movs	r1, #64	; 0x40
 8005e92:	f000 fb25 	bl	80064e0 <_malloc_r>
 8005e96:	6028      	str	r0, [r5, #0]
 8005e98:	6128      	str	r0, [r5, #16]
 8005e9a:	b920      	cbnz	r0, 8005ea6 <_svfiprintf_r+0x2e>
 8005e9c:	230c      	movs	r3, #12
 8005e9e:	603b      	str	r3, [r7, #0]
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	e0d1      	b.n	800604a <_svfiprintf_r+0x1d2>
 8005ea6:	2340      	movs	r3, #64	; 0x40
 8005ea8:	616b      	str	r3, [r5, #20]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	9309      	str	r3, [sp, #36]	; 0x24
 8005eae:	2320      	movs	r3, #32
 8005eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eb4:	2330      	movs	r3, #48	; 0x30
 8005eb6:	f04f 0901 	mov.w	r9, #1
 8005eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ebe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006064 <_svfiprintf_r+0x1ec>
 8005ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	469a      	mov	sl, r3
 8005eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ece:	b10a      	cbz	r2, 8005ed4 <_svfiprintf_r+0x5c>
 8005ed0:	2a25      	cmp	r2, #37	; 0x25
 8005ed2:	d1f9      	bne.n	8005ec8 <_svfiprintf_r+0x50>
 8005ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ed8:	d00b      	beq.n	8005ef2 <_svfiprintf_r+0x7a>
 8005eda:	465b      	mov	r3, fp
 8005edc:	4622      	mov	r2, r4
 8005ede:	4629      	mov	r1, r5
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	f7ff ff6d 	bl	8005dc0 <__ssputs_r>
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	f000 80aa 	beq.w	8006040 <_svfiprintf_r+0x1c8>
 8005eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eee:	445a      	add	r2, fp
 8005ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 80a2 	beq.w	8006040 <_svfiprintf_r+0x1c8>
 8005efc:	2300      	movs	r3, #0
 8005efe:	f04f 32ff 	mov.w	r2, #4294967295
 8005f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f06:	f10a 0a01 	add.w	sl, sl, #1
 8005f0a:	9304      	str	r3, [sp, #16]
 8005f0c:	9307      	str	r3, [sp, #28]
 8005f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f12:	931a      	str	r3, [sp, #104]	; 0x68
 8005f14:	4654      	mov	r4, sl
 8005f16:	2205      	movs	r2, #5
 8005f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f1c:	4851      	ldr	r0, [pc, #324]	; (8006064 <_svfiprintf_r+0x1ec>)
 8005f1e:	f000 fa41 	bl	80063a4 <memchr>
 8005f22:	9a04      	ldr	r2, [sp, #16]
 8005f24:	b9d8      	cbnz	r0, 8005f5e <_svfiprintf_r+0xe6>
 8005f26:	06d0      	lsls	r0, r2, #27
 8005f28:	bf44      	itt	mi
 8005f2a:	2320      	movmi	r3, #32
 8005f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f30:	0711      	lsls	r1, r2, #28
 8005f32:	bf44      	itt	mi
 8005f34:	232b      	movmi	r3, #43	; 0x2b
 8005f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f40:	d015      	beq.n	8005f6e <_svfiprintf_r+0xf6>
 8005f42:	4654      	mov	r4, sl
 8005f44:	2000      	movs	r0, #0
 8005f46:	f04f 0c0a 	mov.w	ip, #10
 8005f4a:	9a07      	ldr	r2, [sp, #28]
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f52:	3b30      	subs	r3, #48	; 0x30
 8005f54:	2b09      	cmp	r3, #9
 8005f56:	d94e      	bls.n	8005ff6 <_svfiprintf_r+0x17e>
 8005f58:	b1b0      	cbz	r0, 8005f88 <_svfiprintf_r+0x110>
 8005f5a:	9207      	str	r2, [sp, #28]
 8005f5c:	e014      	b.n	8005f88 <_svfiprintf_r+0x110>
 8005f5e:	eba0 0308 	sub.w	r3, r0, r8
 8005f62:	fa09 f303 	lsl.w	r3, r9, r3
 8005f66:	4313      	orrs	r3, r2
 8005f68:	46a2      	mov	sl, r4
 8005f6a:	9304      	str	r3, [sp, #16]
 8005f6c:	e7d2      	b.n	8005f14 <_svfiprintf_r+0x9c>
 8005f6e:	9b03      	ldr	r3, [sp, #12]
 8005f70:	1d19      	adds	r1, r3, #4
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	9103      	str	r1, [sp, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bfbb      	ittet	lt
 8005f7a:	425b      	neglt	r3, r3
 8005f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f80:	9307      	strge	r3, [sp, #28]
 8005f82:	9307      	strlt	r3, [sp, #28]
 8005f84:	bfb8      	it	lt
 8005f86:	9204      	strlt	r2, [sp, #16]
 8005f88:	7823      	ldrb	r3, [r4, #0]
 8005f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f8c:	d10c      	bne.n	8005fa8 <_svfiprintf_r+0x130>
 8005f8e:	7863      	ldrb	r3, [r4, #1]
 8005f90:	2b2a      	cmp	r3, #42	; 0x2a
 8005f92:	d135      	bne.n	8006000 <_svfiprintf_r+0x188>
 8005f94:	9b03      	ldr	r3, [sp, #12]
 8005f96:	3402      	adds	r4, #2
 8005f98:	1d1a      	adds	r2, r3, #4
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	9203      	str	r2, [sp, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	bfb8      	it	lt
 8005fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fa6:	9305      	str	r3, [sp, #20]
 8005fa8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006068 <_svfiprintf_r+0x1f0>
 8005fac:	2203      	movs	r2, #3
 8005fae:	4650      	mov	r0, sl
 8005fb0:	7821      	ldrb	r1, [r4, #0]
 8005fb2:	f000 f9f7 	bl	80063a4 <memchr>
 8005fb6:	b140      	cbz	r0, 8005fca <_svfiprintf_r+0x152>
 8005fb8:	2340      	movs	r3, #64	; 0x40
 8005fba:	eba0 000a 	sub.w	r0, r0, sl
 8005fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8005fc2:	9b04      	ldr	r3, [sp, #16]
 8005fc4:	3401      	adds	r4, #1
 8005fc6:	4303      	orrs	r3, r0
 8005fc8:	9304      	str	r3, [sp, #16]
 8005fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fce:	2206      	movs	r2, #6
 8005fd0:	4826      	ldr	r0, [pc, #152]	; (800606c <_svfiprintf_r+0x1f4>)
 8005fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fd6:	f000 f9e5 	bl	80063a4 <memchr>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d038      	beq.n	8006050 <_svfiprintf_r+0x1d8>
 8005fde:	4b24      	ldr	r3, [pc, #144]	; (8006070 <_svfiprintf_r+0x1f8>)
 8005fe0:	bb1b      	cbnz	r3, 800602a <_svfiprintf_r+0x1b2>
 8005fe2:	9b03      	ldr	r3, [sp, #12]
 8005fe4:	3307      	adds	r3, #7
 8005fe6:	f023 0307 	bic.w	r3, r3, #7
 8005fea:	3308      	adds	r3, #8
 8005fec:	9303      	str	r3, [sp, #12]
 8005fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff0:	4433      	add	r3, r6
 8005ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff4:	e767      	b.n	8005ec6 <_svfiprintf_r+0x4e>
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ffe:	e7a5      	b.n	8005f4c <_svfiprintf_r+0xd4>
 8006000:	2300      	movs	r3, #0
 8006002:	f04f 0c0a 	mov.w	ip, #10
 8006006:	4619      	mov	r1, r3
 8006008:	3401      	adds	r4, #1
 800600a:	9305      	str	r3, [sp, #20]
 800600c:	4620      	mov	r0, r4
 800600e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006012:	3a30      	subs	r2, #48	; 0x30
 8006014:	2a09      	cmp	r2, #9
 8006016:	d903      	bls.n	8006020 <_svfiprintf_r+0x1a8>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0c5      	beq.n	8005fa8 <_svfiprintf_r+0x130>
 800601c:	9105      	str	r1, [sp, #20]
 800601e:	e7c3      	b.n	8005fa8 <_svfiprintf_r+0x130>
 8006020:	4604      	mov	r4, r0
 8006022:	2301      	movs	r3, #1
 8006024:	fb0c 2101 	mla	r1, ip, r1, r2
 8006028:	e7f0      	b.n	800600c <_svfiprintf_r+0x194>
 800602a:	ab03      	add	r3, sp, #12
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	462a      	mov	r2, r5
 8006030:	4638      	mov	r0, r7
 8006032:	4b10      	ldr	r3, [pc, #64]	; (8006074 <_svfiprintf_r+0x1fc>)
 8006034:	a904      	add	r1, sp, #16
 8006036:	f3af 8000 	nop.w
 800603a:	1c42      	adds	r2, r0, #1
 800603c:	4606      	mov	r6, r0
 800603e:	d1d6      	bne.n	8005fee <_svfiprintf_r+0x176>
 8006040:	89ab      	ldrh	r3, [r5, #12]
 8006042:	065b      	lsls	r3, r3, #25
 8006044:	f53f af2c 	bmi.w	8005ea0 <_svfiprintf_r+0x28>
 8006048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800604a:	b01d      	add	sp, #116	; 0x74
 800604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006050:	ab03      	add	r3, sp, #12
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	462a      	mov	r2, r5
 8006056:	4638      	mov	r0, r7
 8006058:	4b06      	ldr	r3, [pc, #24]	; (8006074 <_svfiprintf_r+0x1fc>)
 800605a:	a904      	add	r1, sp, #16
 800605c:	f000 f87c 	bl	8006158 <_printf_i>
 8006060:	e7eb      	b.n	800603a <_svfiprintf_r+0x1c2>
 8006062:	bf00      	nop
 8006064:	0800683e 	.word	0x0800683e
 8006068:	08006844 	.word	0x08006844
 800606c:	08006848 	.word	0x08006848
 8006070:	00000000 	.word	0x00000000
 8006074:	08005dc1 	.word	0x08005dc1

08006078 <_printf_common>:
 8006078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800607c:	4616      	mov	r6, r2
 800607e:	4699      	mov	r9, r3
 8006080:	688a      	ldr	r2, [r1, #8]
 8006082:	690b      	ldr	r3, [r1, #16]
 8006084:	4607      	mov	r7, r0
 8006086:	4293      	cmp	r3, r2
 8006088:	bfb8      	it	lt
 800608a:	4613      	movlt	r3, r2
 800608c:	6033      	str	r3, [r6, #0]
 800608e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006092:	460c      	mov	r4, r1
 8006094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006098:	b10a      	cbz	r2, 800609e <_printf_common+0x26>
 800609a:	3301      	adds	r3, #1
 800609c:	6033      	str	r3, [r6, #0]
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	0699      	lsls	r1, r3, #26
 80060a2:	bf42      	ittt	mi
 80060a4:	6833      	ldrmi	r3, [r6, #0]
 80060a6:	3302      	addmi	r3, #2
 80060a8:	6033      	strmi	r3, [r6, #0]
 80060aa:	6825      	ldr	r5, [r4, #0]
 80060ac:	f015 0506 	ands.w	r5, r5, #6
 80060b0:	d106      	bne.n	80060c0 <_printf_common+0x48>
 80060b2:	f104 0a19 	add.w	sl, r4, #25
 80060b6:	68e3      	ldr	r3, [r4, #12]
 80060b8:	6832      	ldr	r2, [r6, #0]
 80060ba:	1a9b      	subs	r3, r3, r2
 80060bc:	42ab      	cmp	r3, r5
 80060be:	dc28      	bgt.n	8006112 <_printf_common+0x9a>
 80060c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060c4:	1e13      	subs	r3, r2, #0
 80060c6:	6822      	ldr	r2, [r4, #0]
 80060c8:	bf18      	it	ne
 80060ca:	2301      	movne	r3, #1
 80060cc:	0692      	lsls	r2, r2, #26
 80060ce:	d42d      	bmi.n	800612c <_printf_common+0xb4>
 80060d0:	4649      	mov	r1, r9
 80060d2:	4638      	mov	r0, r7
 80060d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060d8:	47c0      	blx	r8
 80060da:	3001      	adds	r0, #1
 80060dc:	d020      	beq.n	8006120 <_printf_common+0xa8>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	68e5      	ldr	r5, [r4, #12]
 80060e2:	f003 0306 	and.w	r3, r3, #6
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	bf18      	it	ne
 80060ea:	2500      	movne	r5, #0
 80060ec:	6832      	ldr	r2, [r6, #0]
 80060ee:	f04f 0600 	mov.w	r6, #0
 80060f2:	68a3      	ldr	r3, [r4, #8]
 80060f4:	bf08      	it	eq
 80060f6:	1aad      	subeq	r5, r5, r2
 80060f8:	6922      	ldr	r2, [r4, #16]
 80060fa:	bf08      	it	eq
 80060fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006100:	4293      	cmp	r3, r2
 8006102:	bfc4      	itt	gt
 8006104:	1a9b      	subgt	r3, r3, r2
 8006106:	18ed      	addgt	r5, r5, r3
 8006108:	341a      	adds	r4, #26
 800610a:	42b5      	cmp	r5, r6
 800610c:	d11a      	bne.n	8006144 <_printf_common+0xcc>
 800610e:	2000      	movs	r0, #0
 8006110:	e008      	b.n	8006124 <_printf_common+0xac>
 8006112:	2301      	movs	r3, #1
 8006114:	4652      	mov	r2, sl
 8006116:	4649      	mov	r1, r9
 8006118:	4638      	mov	r0, r7
 800611a:	47c0      	blx	r8
 800611c:	3001      	adds	r0, #1
 800611e:	d103      	bne.n	8006128 <_printf_common+0xb0>
 8006120:	f04f 30ff 	mov.w	r0, #4294967295
 8006124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006128:	3501      	adds	r5, #1
 800612a:	e7c4      	b.n	80060b6 <_printf_common+0x3e>
 800612c:	2030      	movs	r0, #48	; 0x30
 800612e:	18e1      	adds	r1, r4, r3
 8006130:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800613a:	4422      	add	r2, r4
 800613c:	3302      	adds	r3, #2
 800613e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006142:	e7c5      	b.n	80060d0 <_printf_common+0x58>
 8006144:	2301      	movs	r3, #1
 8006146:	4622      	mov	r2, r4
 8006148:	4649      	mov	r1, r9
 800614a:	4638      	mov	r0, r7
 800614c:	47c0      	blx	r8
 800614e:	3001      	adds	r0, #1
 8006150:	d0e6      	beq.n	8006120 <_printf_common+0xa8>
 8006152:	3601      	adds	r6, #1
 8006154:	e7d9      	b.n	800610a <_printf_common+0x92>
	...

08006158 <_printf_i>:
 8006158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800615c:	7e0f      	ldrb	r7, [r1, #24]
 800615e:	4691      	mov	r9, r2
 8006160:	2f78      	cmp	r7, #120	; 0x78
 8006162:	4680      	mov	r8, r0
 8006164:	460c      	mov	r4, r1
 8006166:	469a      	mov	sl, r3
 8006168:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800616a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800616e:	d807      	bhi.n	8006180 <_printf_i+0x28>
 8006170:	2f62      	cmp	r7, #98	; 0x62
 8006172:	d80a      	bhi.n	800618a <_printf_i+0x32>
 8006174:	2f00      	cmp	r7, #0
 8006176:	f000 80d9 	beq.w	800632c <_printf_i+0x1d4>
 800617a:	2f58      	cmp	r7, #88	; 0x58
 800617c:	f000 80a4 	beq.w	80062c8 <_printf_i+0x170>
 8006180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006184:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006188:	e03a      	b.n	8006200 <_printf_i+0xa8>
 800618a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800618e:	2b15      	cmp	r3, #21
 8006190:	d8f6      	bhi.n	8006180 <_printf_i+0x28>
 8006192:	a101      	add	r1, pc, #4	; (adr r1, 8006198 <_printf_i+0x40>)
 8006194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006198:	080061f1 	.word	0x080061f1
 800619c:	08006205 	.word	0x08006205
 80061a0:	08006181 	.word	0x08006181
 80061a4:	08006181 	.word	0x08006181
 80061a8:	08006181 	.word	0x08006181
 80061ac:	08006181 	.word	0x08006181
 80061b0:	08006205 	.word	0x08006205
 80061b4:	08006181 	.word	0x08006181
 80061b8:	08006181 	.word	0x08006181
 80061bc:	08006181 	.word	0x08006181
 80061c0:	08006181 	.word	0x08006181
 80061c4:	08006313 	.word	0x08006313
 80061c8:	08006235 	.word	0x08006235
 80061cc:	080062f5 	.word	0x080062f5
 80061d0:	08006181 	.word	0x08006181
 80061d4:	08006181 	.word	0x08006181
 80061d8:	08006335 	.word	0x08006335
 80061dc:	08006181 	.word	0x08006181
 80061e0:	08006235 	.word	0x08006235
 80061e4:	08006181 	.word	0x08006181
 80061e8:	08006181 	.word	0x08006181
 80061ec:	080062fd 	.word	0x080062fd
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	1d1a      	adds	r2, r3, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	602a      	str	r2, [r5, #0]
 80061f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006200:	2301      	movs	r3, #1
 8006202:	e0a4      	b.n	800634e <_printf_i+0x1f6>
 8006204:	6820      	ldr	r0, [r4, #0]
 8006206:	6829      	ldr	r1, [r5, #0]
 8006208:	0606      	lsls	r6, r0, #24
 800620a:	f101 0304 	add.w	r3, r1, #4
 800620e:	d50a      	bpl.n	8006226 <_printf_i+0xce>
 8006210:	680e      	ldr	r6, [r1, #0]
 8006212:	602b      	str	r3, [r5, #0]
 8006214:	2e00      	cmp	r6, #0
 8006216:	da03      	bge.n	8006220 <_printf_i+0xc8>
 8006218:	232d      	movs	r3, #45	; 0x2d
 800621a:	4276      	negs	r6, r6
 800621c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006220:	230a      	movs	r3, #10
 8006222:	485e      	ldr	r0, [pc, #376]	; (800639c <_printf_i+0x244>)
 8006224:	e019      	b.n	800625a <_printf_i+0x102>
 8006226:	680e      	ldr	r6, [r1, #0]
 8006228:	f010 0f40 	tst.w	r0, #64	; 0x40
 800622c:	602b      	str	r3, [r5, #0]
 800622e:	bf18      	it	ne
 8006230:	b236      	sxthne	r6, r6
 8006232:	e7ef      	b.n	8006214 <_printf_i+0xbc>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	6820      	ldr	r0, [r4, #0]
 8006238:	1d19      	adds	r1, r3, #4
 800623a:	6029      	str	r1, [r5, #0]
 800623c:	0601      	lsls	r1, r0, #24
 800623e:	d501      	bpl.n	8006244 <_printf_i+0xec>
 8006240:	681e      	ldr	r6, [r3, #0]
 8006242:	e002      	b.n	800624a <_printf_i+0xf2>
 8006244:	0646      	lsls	r6, r0, #25
 8006246:	d5fb      	bpl.n	8006240 <_printf_i+0xe8>
 8006248:	881e      	ldrh	r6, [r3, #0]
 800624a:	2f6f      	cmp	r7, #111	; 0x6f
 800624c:	bf0c      	ite	eq
 800624e:	2308      	moveq	r3, #8
 8006250:	230a      	movne	r3, #10
 8006252:	4852      	ldr	r0, [pc, #328]	; (800639c <_printf_i+0x244>)
 8006254:	2100      	movs	r1, #0
 8006256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800625a:	6865      	ldr	r5, [r4, #4]
 800625c:	2d00      	cmp	r5, #0
 800625e:	bfa8      	it	ge
 8006260:	6821      	ldrge	r1, [r4, #0]
 8006262:	60a5      	str	r5, [r4, #8]
 8006264:	bfa4      	itt	ge
 8006266:	f021 0104 	bicge.w	r1, r1, #4
 800626a:	6021      	strge	r1, [r4, #0]
 800626c:	b90e      	cbnz	r6, 8006272 <_printf_i+0x11a>
 800626e:	2d00      	cmp	r5, #0
 8006270:	d04d      	beq.n	800630e <_printf_i+0x1b6>
 8006272:	4615      	mov	r5, r2
 8006274:	fbb6 f1f3 	udiv	r1, r6, r3
 8006278:	fb03 6711 	mls	r7, r3, r1, r6
 800627c:	5dc7      	ldrb	r7, [r0, r7]
 800627e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006282:	4637      	mov	r7, r6
 8006284:	42bb      	cmp	r3, r7
 8006286:	460e      	mov	r6, r1
 8006288:	d9f4      	bls.n	8006274 <_printf_i+0x11c>
 800628a:	2b08      	cmp	r3, #8
 800628c:	d10b      	bne.n	80062a6 <_printf_i+0x14e>
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	07de      	lsls	r6, r3, #31
 8006292:	d508      	bpl.n	80062a6 <_printf_i+0x14e>
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	6861      	ldr	r1, [r4, #4]
 8006298:	4299      	cmp	r1, r3
 800629a:	bfde      	ittt	le
 800629c:	2330      	movle	r3, #48	; 0x30
 800629e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062a6:	1b52      	subs	r2, r2, r5
 80062a8:	6122      	str	r2, [r4, #16]
 80062aa:	464b      	mov	r3, r9
 80062ac:	4621      	mov	r1, r4
 80062ae:	4640      	mov	r0, r8
 80062b0:	f8cd a000 	str.w	sl, [sp]
 80062b4:	aa03      	add	r2, sp, #12
 80062b6:	f7ff fedf 	bl	8006078 <_printf_common>
 80062ba:	3001      	adds	r0, #1
 80062bc:	d14c      	bne.n	8006358 <_printf_i+0x200>
 80062be:	f04f 30ff 	mov.w	r0, #4294967295
 80062c2:	b004      	add	sp, #16
 80062c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c8:	4834      	ldr	r0, [pc, #208]	; (800639c <_printf_i+0x244>)
 80062ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062ce:	6829      	ldr	r1, [r5, #0]
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80062d6:	6029      	str	r1, [r5, #0]
 80062d8:	061d      	lsls	r5, r3, #24
 80062da:	d514      	bpl.n	8006306 <_printf_i+0x1ae>
 80062dc:	07df      	lsls	r7, r3, #31
 80062de:	bf44      	itt	mi
 80062e0:	f043 0320 	orrmi.w	r3, r3, #32
 80062e4:	6023      	strmi	r3, [r4, #0]
 80062e6:	b91e      	cbnz	r6, 80062f0 <_printf_i+0x198>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	f023 0320 	bic.w	r3, r3, #32
 80062ee:	6023      	str	r3, [r4, #0]
 80062f0:	2310      	movs	r3, #16
 80062f2:	e7af      	b.n	8006254 <_printf_i+0xfc>
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	f043 0320 	orr.w	r3, r3, #32
 80062fa:	6023      	str	r3, [r4, #0]
 80062fc:	2378      	movs	r3, #120	; 0x78
 80062fe:	4828      	ldr	r0, [pc, #160]	; (80063a0 <_printf_i+0x248>)
 8006300:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006304:	e7e3      	b.n	80062ce <_printf_i+0x176>
 8006306:	0659      	lsls	r1, r3, #25
 8006308:	bf48      	it	mi
 800630a:	b2b6      	uxthmi	r6, r6
 800630c:	e7e6      	b.n	80062dc <_printf_i+0x184>
 800630e:	4615      	mov	r5, r2
 8006310:	e7bb      	b.n	800628a <_printf_i+0x132>
 8006312:	682b      	ldr	r3, [r5, #0]
 8006314:	6826      	ldr	r6, [r4, #0]
 8006316:	1d18      	adds	r0, r3, #4
 8006318:	6961      	ldr	r1, [r4, #20]
 800631a:	6028      	str	r0, [r5, #0]
 800631c:	0635      	lsls	r5, r6, #24
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	d501      	bpl.n	8006326 <_printf_i+0x1ce>
 8006322:	6019      	str	r1, [r3, #0]
 8006324:	e002      	b.n	800632c <_printf_i+0x1d4>
 8006326:	0670      	lsls	r0, r6, #25
 8006328:	d5fb      	bpl.n	8006322 <_printf_i+0x1ca>
 800632a:	8019      	strh	r1, [r3, #0]
 800632c:	2300      	movs	r3, #0
 800632e:	4615      	mov	r5, r2
 8006330:	6123      	str	r3, [r4, #16]
 8006332:	e7ba      	b.n	80062aa <_printf_i+0x152>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	2100      	movs	r1, #0
 8006338:	1d1a      	adds	r2, r3, #4
 800633a:	602a      	str	r2, [r5, #0]
 800633c:	681d      	ldr	r5, [r3, #0]
 800633e:	6862      	ldr	r2, [r4, #4]
 8006340:	4628      	mov	r0, r5
 8006342:	f000 f82f 	bl	80063a4 <memchr>
 8006346:	b108      	cbz	r0, 800634c <_printf_i+0x1f4>
 8006348:	1b40      	subs	r0, r0, r5
 800634a:	6060      	str	r0, [r4, #4]
 800634c:	6863      	ldr	r3, [r4, #4]
 800634e:	6123      	str	r3, [r4, #16]
 8006350:	2300      	movs	r3, #0
 8006352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006356:	e7a8      	b.n	80062aa <_printf_i+0x152>
 8006358:	462a      	mov	r2, r5
 800635a:	4649      	mov	r1, r9
 800635c:	4640      	mov	r0, r8
 800635e:	6923      	ldr	r3, [r4, #16]
 8006360:	47d0      	blx	sl
 8006362:	3001      	adds	r0, #1
 8006364:	d0ab      	beq.n	80062be <_printf_i+0x166>
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	079b      	lsls	r3, r3, #30
 800636a:	d413      	bmi.n	8006394 <_printf_i+0x23c>
 800636c:	68e0      	ldr	r0, [r4, #12]
 800636e:	9b03      	ldr	r3, [sp, #12]
 8006370:	4298      	cmp	r0, r3
 8006372:	bfb8      	it	lt
 8006374:	4618      	movlt	r0, r3
 8006376:	e7a4      	b.n	80062c2 <_printf_i+0x16a>
 8006378:	2301      	movs	r3, #1
 800637a:	4632      	mov	r2, r6
 800637c:	4649      	mov	r1, r9
 800637e:	4640      	mov	r0, r8
 8006380:	47d0      	blx	sl
 8006382:	3001      	adds	r0, #1
 8006384:	d09b      	beq.n	80062be <_printf_i+0x166>
 8006386:	3501      	adds	r5, #1
 8006388:	68e3      	ldr	r3, [r4, #12]
 800638a:	9903      	ldr	r1, [sp, #12]
 800638c:	1a5b      	subs	r3, r3, r1
 800638e:	42ab      	cmp	r3, r5
 8006390:	dcf2      	bgt.n	8006378 <_printf_i+0x220>
 8006392:	e7eb      	b.n	800636c <_printf_i+0x214>
 8006394:	2500      	movs	r5, #0
 8006396:	f104 0619 	add.w	r6, r4, #25
 800639a:	e7f5      	b.n	8006388 <_printf_i+0x230>
 800639c:	0800684f 	.word	0x0800684f
 80063a0:	08006860 	.word	0x08006860

080063a4 <memchr>:
 80063a4:	4603      	mov	r3, r0
 80063a6:	b510      	push	{r4, lr}
 80063a8:	b2c9      	uxtb	r1, r1
 80063aa:	4402      	add	r2, r0
 80063ac:	4293      	cmp	r3, r2
 80063ae:	4618      	mov	r0, r3
 80063b0:	d101      	bne.n	80063b6 <memchr+0x12>
 80063b2:	2000      	movs	r0, #0
 80063b4:	e003      	b.n	80063be <memchr+0x1a>
 80063b6:	7804      	ldrb	r4, [r0, #0]
 80063b8:	3301      	adds	r3, #1
 80063ba:	428c      	cmp	r4, r1
 80063bc:	d1f6      	bne.n	80063ac <memchr+0x8>
 80063be:	bd10      	pop	{r4, pc}

080063c0 <memcpy>:
 80063c0:	440a      	add	r2, r1
 80063c2:	4291      	cmp	r1, r2
 80063c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063c8:	d100      	bne.n	80063cc <memcpy+0xc>
 80063ca:	4770      	bx	lr
 80063cc:	b510      	push	{r4, lr}
 80063ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d2:	4291      	cmp	r1, r2
 80063d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063d8:	d1f9      	bne.n	80063ce <memcpy+0xe>
 80063da:	bd10      	pop	{r4, pc}

080063dc <memmove>:
 80063dc:	4288      	cmp	r0, r1
 80063de:	b510      	push	{r4, lr}
 80063e0:	eb01 0402 	add.w	r4, r1, r2
 80063e4:	d902      	bls.n	80063ec <memmove+0x10>
 80063e6:	4284      	cmp	r4, r0
 80063e8:	4623      	mov	r3, r4
 80063ea:	d807      	bhi.n	80063fc <memmove+0x20>
 80063ec:	1e43      	subs	r3, r0, #1
 80063ee:	42a1      	cmp	r1, r4
 80063f0:	d008      	beq.n	8006404 <memmove+0x28>
 80063f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063fa:	e7f8      	b.n	80063ee <memmove+0x12>
 80063fc:	4601      	mov	r1, r0
 80063fe:	4402      	add	r2, r0
 8006400:	428a      	cmp	r2, r1
 8006402:	d100      	bne.n	8006406 <memmove+0x2a>
 8006404:	bd10      	pop	{r4, pc}
 8006406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800640a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800640e:	e7f7      	b.n	8006400 <memmove+0x24>

08006410 <_free_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4605      	mov	r5, r0
 8006414:	2900      	cmp	r1, #0
 8006416:	d040      	beq.n	800649a <_free_r+0x8a>
 8006418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800641c:	1f0c      	subs	r4, r1, #4
 800641e:	2b00      	cmp	r3, #0
 8006420:	bfb8      	it	lt
 8006422:	18e4      	addlt	r4, r4, r3
 8006424:	f000 f910 	bl	8006648 <__malloc_lock>
 8006428:	4a1c      	ldr	r2, [pc, #112]	; (800649c <_free_r+0x8c>)
 800642a:	6813      	ldr	r3, [r2, #0]
 800642c:	b933      	cbnz	r3, 800643c <_free_r+0x2c>
 800642e:	6063      	str	r3, [r4, #4]
 8006430:	6014      	str	r4, [r2, #0]
 8006432:	4628      	mov	r0, r5
 8006434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006438:	f000 b90c 	b.w	8006654 <__malloc_unlock>
 800643c:	42a3      	cmp	r3, r4
 800643e:	d908      	bls.n	8006452 <_free_r+0x42>
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	1821      	adds	r1, r4, r0
 8006444:	428b      	cmp	r3, r1
 8006446:	bf01      	itttt	eq
 8006448:	6819      	ldreq	r1, [r3, #0]
 800644a:	685b      	ldreq	r3, [r3, #4]
 800644c:	1809      	addeq	r1, r1, r0
 800644e:	6021      	streq	r1, [r4, #0]
 8006450:	e7ed      	b.n	800642e <_free_r+0x1e>
 8006452:	461a      	mov	r2, r3
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	b10b      	cbz	r3, 800645c <_free_r+0x4c>
 8006458:	42a3      	cmp	r3, r4
 800645a:	d9fa      	bls.n	8006452 <_free_r+0x42>
 800645c:	6811      	ldr	r1, [r2, #0]
 800645e:	1850      	adds	r0, r2, r1
 8006460:	42a0      	cmp	r0, r4
 8006462:	d10b      	bne.n	800647c <_free_r+0x6c>
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	4401      	add	r1, r0
 8006468:	1850      	adds	r0, r2, r1
 800646a:	4283      	cmp	r3, r0
 800646c:	6011      	str	r1, [r2, #0]
 800646e:	d1e0      	bne.n	8006432 <_free_r+0x22>
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	4401      	add	r1, r0
 8006476:	6011      	str	r1, [r2, #0]
 8006478:	6053      	str	r3, [r2, #4]
 800647a:	e7da      	b.n	8006432 <_free_r+0x22>
 800647c:	d902      	bls.n	8006484 <_free_r+0x74>
 800647e:	230c      	movs	r3, #12
 8006480:	602b      	str	r3, [r5, #0]
 8006482:	e7d6      	b.n	8006432 <_free_r+0x22>
 8006484:	6820      	ldr	r0, [r4, #0]
 8006486:	1821      	adds	r1, r4, r0
 8006488:	428b      	cmp	r3, r1
 800648a:	bf01      	itttt	eq
 800648c:	6819      	ldreq	r1, [r3, #0]
 800648e:	685b      	ldreq	r3, [r3, #4]
 8006490:	1809      	addeq	r1, r1, r0
 8006492:	6021      	streq	r1, [r4, #0]
 8006494:	6063      	str	r3, [r4, #4]
 8006496:	6054      	str	r4, [r2, #4]
 8006498:	e7cb      	b.n	8006432 <_free_r+0x22>
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	20000280 	.word	0x20000280

080064a0 <sbrk_aligned>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	4e0e      	ldr	r6, [pc, #56]	; (80064dc <sbrk_aligned+0x3c>)
 80064a4:	460c      	mov	r4, r1
 80064a6:	6831      	ldr	r1, [r6, #0]
 80064a8:	4605      	mov	r5, r0
 80064aa:	b911      	cbnz	r1, 80064b2 <sbrk_aligned+0x12>
 80064ac:	f000 f8bc 	bl	8006628 <_sbrk_r>
 80064b0:	6030      	str	r0, [r6, #0]
 80064b2:	4621      	mov	r1, r4
 80064b4:	4628      	mov	r0, r5
 80064b6:	f000 f8b7 	bl	8006628 <_sbrk_r>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	d00a      	beq.n	80064d4 <sbrk_aligned+0x34>
 80064be:	1cc4      	adds	r4, r0, #3
 80064c0:	f024 0403 	bic.w	r4, r4, #3
 80064c4:	42a0      	cmp	r0, r4
 80064c6:	d007      	beq.n	80064d8 <sbrk_aligned+0x38>
 80064c8:	1a21      	subs	r1, r4, r0
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 f8ac 	bl	8006628 <_sbrk_r>
 80064d0:	3001      	adds	r0, #1
 80064d2:	d101      	bne.n	80064d8 <sbrk_aligned+0x38>
 80064d4:	f04f 34ff 	mov.w	r4, #4294967295
 80064d8:	4620      	mov	r0, r4
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	20000284 	.word	0x20000284

080064e0 <_malloc_r>:
 80064e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e4:	1ccd      	adds	r5, r1, #3
 80064e6:	f025 0503 	bic.w	r5, r5, #3
 80064ea:	3508      	adds	r5, #8
 80064ec:	2d0c      	cmp	r5, #12
 80064ee:	bf38      	it	cc
 80064f0:	250c      	movcc	r5, #12
 80064f2:	2d00      	cmp	r5, #0
 80064f4:	4607      	mov	r7, r0
 80064f6:	db01      	blt.n	80064fc <_malloc_r+0x1c>
 80064f8:	42a9      	cmp	r1, r5
 80064fa:	d905      	bls.n	8006508 <_malloc_r+0x28>
 80064fc:	230c      	movs	r3, #12
 80064fe:	2600      	movs	r6, #0
 8006500:	603b      	str	r3, [r7, #0]
 8006502:	4630      	mov	r0, r6
 8006504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006508:	4e2e      	ldr	r6, [pc, #184]	; (80065c4 <_malloc_r+0xe4>)
 800650a:	f000 f89d 	bl	8006648 <__malloc_lock>
 800650e:	6833      	ldr	r3, [r6, #0]
 8006510:	461c      	mov	r4, r3
 8006512:	bb34      	cbnz	r4, 8006562 <_malloc_r+0x82>
 8006514:	4629      	mov	r1, r5
 8006516:	4638      	mov	r0, r7
 8006518:	f7ff ffc2 	bl	80064a0 <sbrk_aligned>
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	4604      	mov	r4, r0
 8006520:	d14d      	bne.n	80065be <_malloc_r+0xde>
 8006522:	6834      	ldr	r4, [r6, #0]
 8006524:	4626      	mov	r6, r4
 8006526:	2e00      	cmp	r6, #0
 8006528:	d140      	bne.n	80065ac <_malloc_r+0xcc>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	4631      	mov	r1, r6
 800652e:	4638      	mov	r0, r7
 8006530:	eb04 0803 	add.w	r8, r4, r3
 8006534:	f000 f878 	bl	8006628 <_sbrk_r>
 8006538:	4580      	cmp	r8, r0
 800653a:	d13a      	bne.n	80065b2 <_malloc_r+0xd2>
 800653c:	6821      	ldr	r1, [r4, #0]
 800653e:	3503      	adds	r5, #3
 8006540:	1a6d      	subs	r5, r5, r1
 8006542:	f025 0503 	bic.w	r5, r5, #3
 8006546:	3508      	adds	r5, #8
 8006548:	2d0c      	cmp	r5, #12
 800654a:	bf38      	it	cc
 800654c:	250c      	movcc	r5, #12
 800654e:	4638      	mov	r0, r7
 8006550:	4629      	mov	r1, r5
 8006552:	f7ff ffa5 	bl	80064a0 <sbrk_aligned>
 8006556:	3001      	adds	r0, #1
 8006558:	d02b      	beq.n	80065b2 <_malloc_r+0xd2>
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	442b      	add	r3, r5
 800655e:	6023      	str	r3, [r4, #0]
 8006560:	e00e      	b.n	8006580 <_malloc_r+0xa0>
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	1b52      	subs	r2, r2, r5
 8006566:	d41e      	bmi.n	80065a6 <_malloc_r+0xc6>
 8006568:	2a0b      	cmp	r2, #11
 800656a:	d916      	bls.n	800659a <_malloc_r+0xba>
 800656c:	1961      	adds	r1, r4, r5
 800656e:	42a3      	cmp	r3, r4
 8006570:	6025      	str	r5, [r4, #0]
 8006572:	bf18      	it	ne
 8006574:	6059      	strne	r1, [r3, #4]
 8006576:	6863      	ldr	r3, [r4, #4]
 8006578:	bf08      	it	eq
 800657a:	6031      	streq	r1, [r6, #0]
 800657c:	5162      	str	r2, [r4, r5]
 800657e:	604b      	str	r3, [r1, #4]
 8006580:	4638      	mov	r0, r7
 8006582:	f104 060b 	add.w	r6, r4, #11
 8006586:	f000 f865 	bl	8006654 <__malloc_unlock>
 800658a:	f026 0607 	bic.w	r6, r6, #7
 800658e:	1d23      	adds	r3, r4, #4
 8006590:	1af2      	subs	r2, r6, r3
 8006592:	d0b6      	beq.n	8006502 <_malloc_r+0x22>
 8006594:	1b9b      	subs	r3, r3, r6
 8006596:	50a3      	str	r3, [r4, r2]
 8006598:	e7b3      	b.n	8006502 <_malloc_r+0x22>
 800659a:	6862      	ldr	r2, [r4, #4]
 800659c:	42a3      	cmp	r3, r4
 800659e:	bf0c      	ite	eq
 80065a0:	6032      	streq	r2, [r6, #0]
 80065a2:	605a      	strne	r2, [r3, #4]
 80065a4:	e7ec      	b.n	8006580 <_malloc_r+0xa0>
 80065a6:	4623      	mov	r3, r4
 80065a8:	6864      	ldr	r4, [r4, #4]
 80065aa:	e7b2      	b.n	8006512 <_malloc_r+0x32>
 80065ac:	4634      	mov	r4, r6
 80065ae:	6876      	ldr	r6, [r6, #4]
 80065b0:	e7b9      	b.n	8006526 <_malloc_r+0x46>
 80065b2:	230c      	movs	r3, #12
 80065b4:	4638      	mov	r0, r7
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	f000 f84c 	bl	8006654 <__malloc_unlock>
 80065bc:	e7a1      	b.n	8006502 <_malloc_r+0x22>
 80065be:	6025      	str	r5, [r4, #0]
 80065c0:	e7de      	b.n	8006580 <_malloc_r+0xa0>
 80065c2:	bf00      	nop
 80065c4:	20000280 	.word	0x20000280

080065c8 <_realloc_r>:
 80065c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065cc:	4680      	mov	r8, r0
 80065ce:	4614      	mov	r4, r2
 80065d0:	460e      	mov	r6, r1
 80065d2:	b921      	cbnz	r1, 80065de <_realloc_r+0x16>
 80065d4:	4611      	mov	r1, r2
 80065d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065da:	f7ff bf81 	b.w	80064e0 <_malloc_r>
 80065de:	b92a      	cbnz	r2, 80065ec <_realloc_r+0x24>
 80065e0:	f7ff ff16 	bl	8006410 <_free_r>
 80065e4:	4625      	mov	r5, r4
 80065e6:	4628      	mov	r0, r5
 80065e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ec:	f000 f838 	bl	8006660 <_malloc_usable_size_r>
 80065f0:	4284      	cmp	r4, r0
 80065f2:	4607      	mov	r7, r0
 80065f4:	d802      	bhi.n	80065fc <_realloc_r+0x34>
 80065f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065fa:	d812      	bhi.n	8006622 <_realloc_r+0x5a>
 80065fc:	4621      	mov	r1, r4
 80065fe:	4640      	mov	r0, r8
 8006600:	f7ff ff6e 	bl	80064e0 <_malloc_r>
 8006604:	4605      	mov	r5, r0
 8006606:	2800      	cmp	r0, #0
 8006608:	d0ed      	beq.n	80065e6 <_realloc_r+0x1e>
 800660a:	42bc      	cmp	r4, r7
 800660c:	4622      	mov	r2, r4
 800660e:	4631      	mov	r1, r6
 8006610:	bf28      	it	cs
 8006612:	463a      	movcs	r2, r7
 8006614:	f7ff fed4 	bl	80063c0 <memcpy>
 8006618:	4631      	mov	r1, r6
 800661a:	4640      	mov	r0, r8
 800661c:	f7ff fef8 	bl	8006410 <_free_r>
 8006620:	e7e1      	b.n	80065e6 <_realloc_r+0x1e>
 8006622:	4635      	mov	r5, r6
 8006624:	e7df      	b.n	80065e6 <_realloc_r+0x1e>
	...

08006628 <_sbrk_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	2300      	movs	r3, #0
 800662c:	4d05      	ldr	r5, [pc, #20]	; (8006644 <_sbrk_r+0x1c>)
 800662e:	4604      	mov	r4, r0
 8006630:	4608      	mov	r0, r1
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	f7fb fe7c 	bl	8002330 <_sbrk>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	d102      	bne.n	8006642 <_sbrk_r+0x1a>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	b103      	cbz	r3, 8006642 <_sbrk_r+0x1a>
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	20000288 	.word	0x20000288

08006648 <__malloc_lock>:
 8006648:	4801      	ldr	r0, [pc, #4]	; (8006650 <__malloc_lock+0x8>)
 800664a:	f000 b811 	b.w	8006670 <__retarget_lock_acquire_recursive>
 800664e:	bf00      	nop
 8006650:	2000028c 	.word	0x2000028c

08006654 <__malloc_unlock>:
 8006654:	4801      	ldr	r0, [pc, #4]	; (800665c <__malloc_unlock+0x8>)
 8006656:	f000 b80c 	b.w	8006672 <__retarget_lock_release_recursive>
 800665a:	bf00      	nop
 800665c:	2000028c 	.word	0x2000028c

08006660 <_malloc_usable_size_r>:
 8006660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006664:	1f18      	subs	r0, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	bfbc      	itt	lt
 800666a:	580b      	ldrlt	r3, [r1, r0]
 800666c:	18c0      	addlt	r0, r0, r3
 800666e:	4770      	bx	lr

08006670 <__retarget_lock_acquire_recursive>:
 8006670:	4770      	bx	lr

08006672 <__retarget_lock_release_recursive>:
 8006672:	4770      	bx	lr

08006674 <_init>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	bf00      	nop
 8006678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667a:	bc08      	pop	{r3}
 800667c:	469e      	mov	lr, r3
 800667e:	4770      	bx	lr

08006680 <_fini>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	bf00      	nop
 8006684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006686:	bc08      	pop	{r3}
 8006688:	469e      	mov	lr, r3
 800668a:	4770      	bx	lr
